// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package graph

import (
	"bytes"
	"context"
	"embed"
	"errors"
	"fmt"
	"strconv"
	"sync"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/Tirrell-C/fleet-risk-intelligence/pkg/models"
	"github.com/Tirrell-C/fleet-risk-intelligence/services/api/graph/model"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		schema:     cfg.Schema,
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Schema     *ast.Schema
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Alert() AlertResolver
	Driver() DriverResolver
	DriverScore() DriverScoreResolver
	Fleet() FleetResolver
	Mutation() MutationResolver
	Query() QueryResolver
	RiskEvent() RiskEventResolver
	Subscription() SubscriptionResolver
	TelemetryEvent() TelemetryEventResolver
	Vehicle() VehicleResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	Alert struct {
		CreatedAt   func(childComplexity int) int
		Driver      func(childComplexity int) int
		DriverID    func(childComplexity int) int
		Fleet       func(childComplexity int) int
		FleetID     func(childComplexity int) int
		ID          func(childComplexity int) int
		Message     func(childComplexity int) int
		Priority    func(childComplexity int) int
		RiskEvent   func(childComplexity int) int
		RiskEventID func(childComplexity int) int
		Status      func(childComplexity int) int
		Title       func(childComplexity int) int
		Type        func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
		Vehicle     func(childComplexity int) int
		VehicleID   func(childComplexity int) int
	}

	Driver struct {
		CreatedAt      func(childComplexity int) int
		CurrentVehicle func(childComplexity int) int
		DriverScore    func(childComplexity int) int
		Email          func(childComplexity int) int
		EmployeeID     func(childComplexity int) int
		FirstName      func(childComplexity int) int
		Fleet          func(childComplexity int) int
		FleetID        func(childComplexity int) int
		ID             func(childComplexity int) int
		LastName       func(childComplexity int) int
		LicenseNumber  func(childComplexity int) int
		Phone          func(childComplexity int) int
		RiskScore      func(childComplexity int) int
		Status         func(childComplexity int) int
		UpdatedAt      func(childComplexity int) int
	}

	DriverScore struct {
		CreatedAt       func(childComplexity int) int
		Driver          func(childComplexity int) int
		DriverID        func(childComplexity int) int
		EfficiencyScore func(childComplexity int) int
		ID              func(childComplexity int) int
		LastUpdated     func(childComplexity int) int
		OverallScore    func(childComplexity int) int
		RiskEvents      func(childComplexity int) int
		SafetyScore     func(childComplexity int) int
		TotalMiles      func(childComplexity int) int
		TotalTrips      func(childComplexity int) int
		UpdatedAt       func(childComplexity int) int
	}

	Fleet struct {
		CompanyName  func(childComplexity int) int
		ContactEmail func(childComplexity int) int
		CreatedAt    func(childComplexity int) int
		Drivers      func(childComplexity int) int
		ID           func(childComplexity int) int
		Name         func(childComplexity int) int
		Status       func(childComplexity int) int
		UpdatedAt    func(childComplexity int) int
		Vehicles     func(childComplexity int) int
	}

	Location struct {
		Address   func(childComplexity int) int
		Latitude  func(childComplexity int) int
		Longitude func(childComplexity int) int
	}

	Mutation struct {
		AcknowledgeAlert func(childComplexity int, id string) int
		AssignDriver     func(childComplexity int, vehicleID string, driverID string) int
		CreateDriver     func(childComplexity int, input model.CreateDriverInput) int
		CreateFleet      func(childComplexity int, input model.CreateFleetInput) int
		CreateVehicle    func(childComplexity int, input model.CreateVehicleInput) int
		DismissAlert     func(childComplexity int, id string) int
		UpdateDriver     func(childComplexity int, id string, input model.UpdateDriverInput) int
		UpdateFleet      func(childComplexity int, id string, input model.UpdateFleetInput) int
		UpdateVehicle    func(childComplexity int, id string, input model.UpdateVehicleInput) int
	}

	Query struct {
		Alerts          func(childComplexity int, fleetID string, status *model.AlertStatus) int
		Driver          func(childComplexity int, id string) int
		DriverScores    func(childComplexity int, fleetID string) int
		Drivers         func(childComplexity int, fleetID *string) int
		Fleet           func(childComplexity int, id string) int
		Fleets          func(childComplexity int) int
		LiveVehicleData func(childComplexity int, vehicleID string) int
		RiskEvents      func(childComplexity int, vehicleID *string, driverID *string, limit *int) int
		Vehicle         func(childComplexity int, id string) int
		Vehicles        func(childComplexity int, fleetID *string) int
	}

	RiskEvent struct {
		CreatedAt   func(childComplexity int) int
		Data        func(childComplexity int) int
		Description func(childComplexity int) int
		Driver      func(childComplexity int) int
		DriverID    func(childComplexity int) int
		EventType   func(childComplexity int) int
		ID          func(childComplexity int) int
		Latitude    func(childComplexity int) int
		Longitude   func(childComplexity int) int
		RiskScore   func(childComplexity int) int
		Severity    func(childComplexity int) int
		Status      func(childComplexity int) int
		Timestamp   func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
		Vehicle     func(childComplexity int) int
		VehicleID   func(childComplexity int) int
	}

	Subscription struct {
		AlertNotifications     func(childComplexity int, fleetID string) int
		RiskEventNotifications func(childComplexity int, fleetID string) int
		VehicleUpdates         func(childComplexity int, vehicleID string) int
	}

	TelemetryEvent struct {
		Acceleration func(childComplexity int) int
		CreatedAt    func(childComplexity int) int
		Data         func(childComplexity int) int
		EventType    func(childComplexity int) int
		ID           func(childComplexity int) int
		Latitude     func(childComplexity int) int
		Longitude    func(childComplexity int) int
		ProcessedAt  func(childComplexity int) int
		Speed        func(childComplexity int) int
		Timestamp    func(childComplexity int) int
		Vehicle      func(childComplexity int) int
		VehicleID    func(childComplexity int) int
	}

	Vehicle struct {
		CreatedAt       func(childComplexity int) int
		CurrentLocation func(childComplexity int) int
		Driver          func(childComplexity int) int
		DriverID        func(childComplexity int) int
		Fleet           func(childComplexity int) int
		FleetID         func(childComplexity int) int
		ID              func(childComplexity int) int
		LastTelemetry   func(childComplexity int) int
		LicensePlate    func(childComplexity int) int
		Make            func(childComplexity int) int
		Model           func(childComplexity int) int
		RiskScore       func(childComplexity int) int
		Status          func(childComplexity int) int
		UpdatedAt       func(childComplexity int) int
		VIN             func(childComplexity int) int
		Year            func(childComplexity int) int
	}

	VehicleData struct {
		EngineStatus func(childComplexity int) int
		FuelLevel    func(childComplexity int) int
		Heading      func(childComplexity int) int
		LastUpdate   func(childComplexity int) int
		Location     func(childComplexity int) int
		Speed        func(childComplexity int) int
		Vehicle      func(childComplexity int) int
	}
}

type AlertResolver interface {
	ID(ctx context.Context, obj *models.Alert) (string, error)
	FleetID(ctx context.Context, obj *models.Alert) (string, error)

	VehicleID(ctx context.Context, obj *models.Alert) (*string, error)

	DriverID(ctx context.Context, obj *models.Alert) (*string, error)

	RiskEventID(ctx context.Context, obj *models.Alert) (*string, error)

	Type(ctx context.Context, obj *models.Alert) (model.AlertType, error)
	Priority(ctx context.Context, obj *models.Alert) (model.AlertPriority, error)

	Status(ctx context.Context, obj *models.Alert) (model.AlertStatus, error)
	CreatedAt(ctx context.Context, obj *models.Alert) (string, error)
	UpdatedAt(ctx context.Context, obj *models.Alert) (string, error)
}
type DriverResolver interface {
	ID(ctx context.Context, obj *models.Driver) (string, error)

	LicenseNumber(ctx context.Context, obj *models.Driver) (string, error)
	FleetID(ctx context.Context, obj *models.Driver) (string, error)

	Status(ctx context.Context, obj *models.Driver) (model.DriverStatus, error)

	CurrentVehicle(ctx context.Context, obj *models.Driver) (*models.Vehicle, error)
	DriverScore(ctx context.Context, obj *models.Driver) (*models.DriverScore, error)
	CreatedAt(ctx context.Context, obj *models.Driver) (string, error)
	UpdatedAt(ctx context.Context, obj *models.Driver) (string, error)
}
type DriverScoreResolver interface {
	ID(ctx context.Context, obj *models.DriverScore) (string, error)
	DriverID(ctx context.Context, obj *models.DriverScore) (string, error)

	LastUpdated(ctx context.Context, obj *models.DriverScore) (string, error)
	CreatedAt(ctx context.Context, obj *models.DriverScore) (string, error)
	UpdatedAt(ctx context.Context, obj *models.DriverScore) (string, error)
}
type FleetResolver interface {
	ID(ctx context.Context, obj *models.Fleet) (string, error)

	Vehicles(ctx context.Context, obj *models.Fleet) ([]*models.Vehicle, error)
	Drivers(ctx context.Context, obj *models.Fleet) ([]*models.Driver, error)
	CreatedAt(ctx context.Context, obj *models.Fleet) (string, error)
	UpdatedAt(ctx context.Context, obj *models.Fleet) (string, error)
}
type MutationResolver interface {
	CreateFleet(ctx context.Context, input model.CreateFleetInput) (*models.Fleet, error)
	UpdateFleet(ctx context.Context, id string, input model.UpdateFleetInput) (*models.Fleet, error)
	CreateVehicle(ctx context.Context, input model.CreateVehicleInput) (*models.Vehicle, error)
	UpdateVehicle(ctx context.Context, id string, input model.UpdateVehicleInput) (*models.Vehicle, error)
	AssignDriver(ctx context.Context, vehicleID string, driverID string) (*models.Vehicle, error)
	CreateDriver(ctx context.Context, input model.CreateDriverInput) (*models.Driver, error)
	UpdateDriver(ctx context.Context, id string, input model.UpdateDriverInput) (*models.Driver, error)
	AcknowledgeAlert(ctx context.Context, id string) (*models.Alert, error)
	DismissAlert(ctx context.Context, id string) (*models.Alert, error)
}
type QueryResolver interface {
	Fleets(ctx context.Context) ([]*models.Fleet, error)
	Fleet(ctx context.Context, id string) (*models.Fleet, error)
	Vehicles(ctx context.Context, fleetID *string) ([]*models.Vehicle, error)
	Vehicle(ctx context.Context, id string) (*models.Vehicle, error)
	Drivers(ctx context.Context, fleetID *string) ([]*models.Driver, error)
	Driver(ctx context.Context, id string) (*models.Driver, error)
	RiskEvents(ctx context.Context, vehicleID *string, driverID *string, limit *int) ([]*models.RiskEvent, error)
	Alerts(ctx context.Context, fleetID string, status *model.AlertStatus) ([]*models.Alert, error)
	DriverScores(ctx context.Context, fleetID string) ([]*models.DriverScore, error)
	LiveVehicleData(ctx context.Context, vehicleID string) (*model.VehicleData, error)
}
type RiskEventResolver interface {
	ID(ctx context.Context, obj *models.RiskEvent) (string, error)
	VehicleID(ctx context.Context, obj *models.RiskEvent) (string, error)

	DriverID(ctx context.Context, obj *models.RiskEvent) (*string, error)

	EventType(ctx context.Context, obj *models.RiskEvent) (model.RiskEventType, error)
	Severity(ctx context.Context, obj *models.RiskEvent) (model.RiskSeverity, error)

	Timestamp(ctx context.Context, obj *models.RiskEvent) (string, error)

	Status(ctx context.Context, obj *models.RiskEvent) (model.RiskEventStatus, error)
	CreatedAt(ctx context.Context, obj *models.RiskEvent) (string, error)
	UpdatedAt(ctx context.Context, obj *models.RiskEvent) (string, error)
}
type SubscriptionResolver interface {
	VehicleUpdates(ctx context.Context, vehicleID string) (<-chan *model.VehicleData, error)
	RiskEventNotifications(ctx context.Context, fleetID string) (<-chan *models.RiskEvent, error)
	AlertNotifications(ctx context.Context, fleetID string) (<-chan *models.Alert, error)
}
type TelemetryEventResolver interface {
	ID(ctx context.Context, obj *models.TelemetryEvent) (string, error)
	VehicleID(ctx context.Context, obj *models.TelemetryEvent) (string, error)

	Timestamp(ctx context.Context, obj *models.TelemetryEvent) (string, error)

	ProcessedAt(ctx context.Context, obj *models.TelemetryEvent) (*string, error)
	CreatedAt(ctx context.Context, obj *models.TelemetryEvent) (string, error)
}
type VehicleResolver interface {
	ID(ctx context.Context, obj *models.Vehicle) (string, error)

	FleetID(ctx context.Context, obj *models.Vehicle) (string, error)

	DriverID(ctx context.Context, obj *models.Vehicle) (*string, error)

	Status(ctx context.Context, obj *models.Vehicle) (model.VehicleStatus, error)
	CurrentLocation(ctx context.Context, obj *models.Vehicle) (*model.Location, error)
	LastTelemetry(ctx context.Context, obj *models.Vehicle) (*models.TelemetryEvent, error)
	RiskScore(ctx context.Context, obj *models.Vehicle) (float64, error)
	CreatedAt(ctx context.Context, obj *models.Vehicle) (string, error)
	UpdatedAt(ctx context.Context, obj *models.Vehicle) (string, error)
}

type executableSchema struct {
	schema     *ast.Schema
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	if e.schema != nil {
		return e.schema
	}
	return parsedSchema
}

func (e *executableSchema) Complexity(ctx context.Context, typeName, field string, childComplexity int, rawArgs map[string]any) (int, bool) {
	ec := executionContext{nil, e, 0, 0, nil}
	_ = ec
	switch typeName + "." + field {

	case "Alert.createdAt":
		if e.complexity.Alert.CreatedAt == nil {
			break
		}

		return e.complexity.Alert.CreatedAt(childComplexity), true
	case "Alert.driver":
		if e.complexity.Alert.Driver == nil {
			break
		}

		return e.complexity.Alert.Driver(childComplexity), true
	case "Alert.driverId":
		if e.complexity.Alert.DriverID == nil {
			break
		}

		return e.complexity.Alert.DriverID(childComplexity), true
	case "Alert.fleet":
		if e.complexity.Alert.Fleet == nil {
			break
		}

		return e.complexity.Alert.Fleet(childComplexity), true
	case "Alert.fleetId":
		if e.complexity.Alert.FleetID == nil {
			break
		}

		return e.complexity.Alert.FleetID(childComplexity), true
	case "Alert.id":
		if e.complexity.Alert.ID == nil {
			break
		}

		return e.complexity.Alert.ID(childComplexity), true
	case "Alert.message":
		if e.complexity.Alert.Message == nil {
			break
		}

		return e.complexity.Alert.Message(childComplexity), true
	case "Alert.priority":
		if e.complexity.Alert.Priority == nil {
			break
		}

		return e.complexity.Alert.Priority(childComplexity), true
	case "Alert.riskEvent":
		if e.complexity.Alert.RiskEvent == nil {
			break
		}

		return e.complexity.Alert.RiskEvent(childComplexity), true
	case "Alert.riskEventId":
		if e.complexity.Alert.RiskEventID == nil {
			break
		}

		return e.complexity.Alert.RiskEventID(childComplexity), true
	case "Alert.status":
		if e.complexity.Alert.Status == nil {
			break
		}

		return e.complexity.Alert.Status(childComplexity), true
	case "Alert.title":
		if e.complexity.Alert.Title == nil {
			break
		}

		return e.complexity.Alert.Title(childComplexity), true
	case "Alert.type":
		if e.complexity.Alert.Type == nil {
			break
		}

		return e.complexity.Alert.Type(childComplexity), true
	case "Alert.updatedAt":
		if e.complexity.Alert.UpdatedAt == nil {
			break
		}

		return e.complexity.Alert.UpdatedAt(childComplexity), true
	case "Alert.vehicle":
		if e.complexity.Alert.Vehicle == nil {
			break
		}

		return e.complexity.Alert.Vehicle(childComplexity), true
	case "Alert.vehicleId":
		if e.complexity.Alert.VehicleID == nil {
			break
		}

		return e.complexity.Alert.VehicleID(childComplexity), true

	case "Driver.createdAt":
		if e.complexity.Driver.CreatedAt == nil {
			break
		}

		return e.complexity.Driver.CreatedAt(childComplexity), true
	case "Driver.currentVehicle":
		if e.complexity.Driver.CurrentVehicle == nil {
			break
		}

		return e.complexity.Driver.CurrentVehicle(childComplexity), true
	case "Driver.driverScore":
		if e.complexity.Driver.DriverScore == nil {
			break
		}

		return e.complexity.Driver.DriverScore(childComplexity), true
	case "Driver.email":
		if e.complexity.Driver.Email == nil {
			break
		}

		return e.complexity.Driver.Email(childComplexity), true
	case "Driver.employeeId":
		if e.complexity.Driver.EmployeeID == nil {
			break
		}

		return e.complexity.Driver.EmployeeID(childComplexity), true
	case "Driver.firstName":
		if e.complexity.Driver.FirstName == nil {
			break
		}

		return e.complexity.Driver.FirstName(childComplexity), true
	case "Driver.fleet":
		if e.complexity.Driver.Fleet == nil {
			break
		}

		return e.complexity.Driver.Fleet(childComplexity), true
	case "Driver.fleetId":
		if e.complexity.Driver.FleetID == nil {
			break
		}

		return e.complexity.Driver.FleetID(childComplexity), true
	case "Driver.id":
		if e.complexity.Driver.ID == nil {
			break
		}

		return e.complexity.Driver.ID(childComplexity), true
	case "Driver.lastName":
		if e.complexity.Driver.LastName == nil {
			break
		}

		return e.complexity.Driver.LastName(childComplexity), true
	case "Driver.licenseNumber":
		if e.complexity.Driver.LicenseNumber == nil {
			break
		}

		return e.complexity.Driver.LicenseNumber(childComplexity), true
	case "Driver.phone":
		if e.complexity.Driver.Phone == nil {
			break
		}

		return e.complexity.Driver.Phone(childComplexity), true
	case "Driver.riskScore":
		if e.complexity.Driver.RiskScore == nil {
			break
		}

		return e.complexity.Driver.RiskScore(childComplexity), true
	case "Driver.status":
		if e.complexity.Driver.Status == nil {
			break
		}

		return e.complexity.Driver.Status(childComplexity), true
	case "Driver.updatedAt":
		if e.complexity.Driver.UpdatedAt == nil {
			break
		}

		return e.complexity.Driver.UpdatedAt(childComplexity), true

	case "DriverScore.createdAt":
		if e.complexity.DriverScore.CreatedAt == nil {
			break
		}

		return e.complexity.DriverScore.CreatedAt(childComplexity), true
	case "DriverScore.driver":
		if e.complexity.DriverScore.Driver == nil {
			break
		}

		return e.complexity.DriverScore.Driver(childComplexity), true
	case "DriverScore.driverId":
		if e.complexity.DriverScore.DriverID == nil {
			break
		}

		return e.complexity.DriverScore.DriverID(childComplexity), true
	case "DriverScore.efficiencyScore":
		if e.complexity.DriverScore.EfficiencyScore == nil {
			break
		}

		return e.complexity.DriverScore.EfficiencyScore(childComplexity), true
	case "DriverScore.id":
		if e.complexity.DriverScore.ID == nil {
			break
		}

		return e.complexity.DriverScore.ID(childComplexity), true
	case "DriverScore.lastUpdated":
		if e.complexity.DriverScore.LastUpdated == nil {
			break
		}

		return e.complexity.DriverScore.LastUpdated(childComplexity), true
	case "DriverScore.overallScore":
		if e.complexity.DriverScore.OverallScore == nil {
			break
		}

		return e.complexity.DriverScore.OverallScore(childComplexity), true
	case "DriverScore.riskEvents":
		if e.complexity.DriverScore.RiskEvents == nil {
			break
		}

		return e.complexity.DriverScore.RiskEvents(childComplexity), true
	case "DriverScore.safetyScore":
		if e.complexity.DriverScore.SafetyScore == nil {
			break
		}

		return e.complexity.DriverScore.SafetyScore(childComplexity), true
	case "DriverScore.totalMiles":
		if e.complexity.DriverScore.TotalMiles == nil {
			break
		}

		return e.complexity.DriverScore.TotalMiles(childComplexity), true
	case "DriverScore.totalTrips":
		if e.complexity.DriverScore.TotalTrips == nil {
			break
		}

		return e.complexity.DriverScore.TotalTrips(childComplexity), true
	case "DriverScore.updatedAt":
		if e.complexity.DriverScore.UpdatedAt == nil {
			break
		}

		return e.complexity.DriverScore.UpdatedAt(childComplexity), true

	case "Fleet.companyName":
		if e.complexity.Fleet.CompanyName == nil {
			break
		}

		return e.complexity.Fleet.CompanyName(childComplexity), true
	case "Fleet.contactEmail":
		if e.complexity.Fleet.ContactEmail == nil {
			break
		}

		return e.complexity.Fleet.ContactEmail(childComplexity), true
	case "Fleet.createdAt":
		if e.complexity.Fleet.CreatedAt == nil {
			break
		}

		return e.complexity.Fleet.CreatedAt(childComplexity), true
	case "Fleet.drivers":
		if e.complexity.Fleet.Drivers == nil {
			break
		}

		return e.complexity.Fleet.Drivers(childComplexity), true
	case "Fleet.id":
		if e.complexity.Fleet.ID == nil {
			break
		}

		return e.complexity.Fleet.ID(childComplexity), true
	case "Fleet.name":
		if e.complexity.Fleet.Name == nil {
			break
		}

		return e.complexity.Fleet.Name(childComplexity), true
	case "Fleet.status":
		if e.complexity.Fleet.Status == nil {
			break
		}

		return e.complexity.Fleet.Status(childComplexity), true
	case "Fleet.updatedAt":
		if e.complexity.Fleet.UpdatedAt == nil {
			break
		}

		return e.complexity.Fleet.UpdatedAt(childComplexity), true
	case "Fleet.vehicles":
		if e.complexity.Fleet.Vehicles == nil {
			break
		}

		return e.complexity.Fleet.Vehicles(childComplexity), true

	case "Location.address":
		if e.complexity.Location.Address == nil {
			break
		}

		return e.complexity.Location.Address(childComplexity), true
	case "Location.latitude":
		if e.complexity.Location.Latitude == nil {
			break
		}

		return e.complexity.Location.Latitude(childComplexity), true
	case "Location.longitude":
		if e.complexity.Location.Longitude == nil {
			break
		}

		return e.complexity.Location.Longitude(childComplexity), true

	case "Mutation.acknowledgeAlert":
		if e.complexity.Mutation.AcknowledgeAlert == nil {
			break
		}

		args, err := ec.field_Mutation_acknowledgeAlert_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AcknowledgeAlert(childComplexity, args["id"].(string)), true
	case "Mutation.assignDriver":
		if e.complexity.Mutation.AssignDriver == nil {
			break
		}

		args, err := ec.field_Mutation_assignDriver_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AssignDriver(childComplexity, args["vehicleId"].(string), args["driverId"].(string)), true
	case "Mutation.createDriver":
		if e.complexity.Mutation.CreateDriver == nil {
			break
		}

		args, err := ec.field_Mutation_createDriver_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateDriver(childComplexity, args["input"].(model.CreateDriverInput)), true
	case "Mutation.createFleet":
		if e.complexity.Mutation.CreateFleet == nil {
			break
		}

		args, err := ec.field_Mutation_createFleet_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateFleet(childComplexity, args["input"].(model.CreateFleetInput)), true
	case "Mutation.createVehicle":
		if e.complexity.Mutation.CreateVehicle == nil {
			break
		}

		args, err := ec.field_Mutation_createVehicle_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateVehicle(childComplexity, args["input"].(model.CreateVehicleInput)), true
	case "Mutation.dismissAlert":
		if e.complexity.Mutation.DismissAlert == nil {
			break
		}

		args, err := ec.field_Mutation_dismissAlert_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DismissAlert(childComplexity, args["id"].(string)), true
	case "Mutation.updateDriver":
		if e.complexity.Mutation.UpdateDriver == nil {
			break
		}

		args, err := ec.field_Mutation_updateDriver_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDriver(childComplexity, args["id"].(string), args["input"].(model.UpdateDriverInput)), true
	case "Mutation.updateFleet":
		if e.complexity.Mutation.UpdateFleet == nil {
			break
		}

		args, err := ec.field_Mutation_updateFleet_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateFleet(childComplexity, args["id"].(string), args["input"].(model.UpdateFleetInput)), true
	case "Mutation.updateVehicle":
		if e.complexity.Mutation.UpdateVehicle == nil {
			break
		}

		args, err := ec.field_Mutation_updateVehicle_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateVehicle(childComplexity, args["id"].(string), args["input"].(model.UpdateVehicleInput)), true

	case "Query.alerts":
		if e.complexity.Query.Alerts == nil {
			break
		}

		args, err := ec.field_Query_alerts_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Alerts(childComplexity, args["fleetId"].(string), args["status"].(*model.AlertStatus)), true
	case "Query.driver":
		if e.complexity.Query.Driver == nil {
			break
		}

		args, err := ec.field_Query_driver_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Driver(childComplexity, args["id"].(string)), true
	case "Query.driverScores":
		if e.complexity.Query.DriverScores == nil {
			break
		}

		args, err := ec.field_Query_driverScores_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DriverScores(childComplexity, args["fleetId"].(string)), true
	case "Query.drivers":
		if e.complexity.Query.Drivers == nil {
			break
		}

		args, err := ec.field_Query_drivers_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Drivers(childComplexity, args["fleetId"].(*string)), true
	case "Query.fleet":
		if e.complexity.Query.Fleet == nil {
			break
		}

		args, err := ec.field_Query_fleet_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Fleet(childComplexity, args["id"].(string)), true
	case "Query.fleets":
		if e.complexity.Query.Fleets == nil {
			break
		}

		return e.complexity.Query.Fleets(childComplexity), true
	case "Query.liveVehicleData":
		if e.complexity.Query.LiveVehicleData == nil {
			break
		}

		args, err := ec.field_Query_liveVehicleData_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.LiveVehicleData(childComplexity, args["vehicleId"].(string)), true
	case "Query.riskEvents":
		if e.complexity.Query.RiskEvents == nil {
			break
		}

		args, err := ec.field_Query_riskEvents_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RiskEvents(childComplexity, args["vehicleId"].(*string), args["driverId"].(*string), args["limit"].(*int)), true
	case "Query.vehicle":
		if e.complexity.Query.Vehicle == nil {
			break
		}

		args, err := ec.field_Query_vehicle_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Vehicle(childComplexity, args["id"].(string)), true
	case "Query.vehicles":
		if e.complexity.Query.Vehicles == nil {
			break
		}

		args, err := ec.field_Query_vehicles_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Vehicles(childComplexity, args["fleetId"].(*string)), true

	case "RiskEvent.createdAt":
		if e.complexity.RiskEvent.CreatedAt == nil {
			break
		}

		return e.complexity.RiskEvent.CreatedAt(childComplexity), true
	case "RiskEvent.data":
		if e.complexity.RiskEvent.Data == nil {
			break
		}

		return e.complexity.RiskEvent.Data(childComplexity), true
	case "RiskEvent.description":
		if e.complexity.RiskEvent.Description == nil {
			break
		}

		return e.complexity.RiskEvent.Description(childComplexity), true
	case "RiskEvent.driver":
		if e.complexity.RiskEvent.Driver == nil {
			break
		}

		return e.complexity.RiskEvent.Driver(childComplexity), true
	case "RiskEvent.driverId":
		if e.complexity.RiskEvent.DriverID == nil {
			break
		}

		return e.complexity.RiskEvent.DriverID(childComplexity), true
	case "RiskEvent.eventType":
		if e.complexity.RiskEvent.EventType == nil {
			break
		}

		return e.complexity.RiskEvent.EventType(childComplexity), true
	case "RiskEvent.id":
		if e.complexity.RiskEvent.ID == nil {
			break
		}

		return e.complexity.RiskEvent.ID(childComplexity), true
	case "RiskEvent.latitude":
		if e.complexity.RiskEvent.Latitude == nil {
			break
		}

		return e.complexity.RiskEvent.Latitude(childComplexity), true
	case "RiskEvent.longitude":
		if e.complexity.RiskEvent.Longitude == nil {
			break
		}

		return e.complexity.RiskEvent.Longitude(childComplexity), true
	case "RiskEvent.riskScore":
		if e.complexity.RiskEvent.RiskScore == nil {
			break
		}

		return e.complexity.RiskEvent.RiskScore(childComplexity), true
	case "RiskEvent.severity":
		if e.complexity.RiskEvent.Severity == nil {
			break
		}

		return e.complexity.RiskEvent.Severity(childComplexity), true
	case "RiskEvent.status":
		if e.complexity.RiskEvent.Status == nil {
			break
		}

		return e.complexity.RiskEvent.Status(childComplexity), true
	case "RiskEvent.timestamp":
		if e.complexity.RiskEvent.Timestamp == nil {
			break
		}

		return e.complexity.RiskEvent.Timestamp(childComplexity), true
	case "RiskEvent.updatedAt":
		if e.complexity.RiskEvent.UpdatedAt == nil {
			break
		}

		return e.complexity.RiskEvent.UpdatedAt(childComplexity), true
	case "RiskEvent.vehicle":
		if e.complexity.RiskEvent.Vehicle == nil {
			break
		}

		return e.complexity.RiskEvent.Vehicle(childComplexity), true
	case "RiskEvent.vehicleId":
		if e.complexity.RiskEvent.VehicleID == nil {
			break
		}

		return e.complexity.RiskEvent.VehicleID(childComplexity), true

	case "Subscription.alertNotifications":
		if e.complexity.Subscription.AlertNotifications == nil {
			break
		}

		args, err := ec.field_Subscription_alertNotifications_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.AlertNotifications(childComplexity, args["fleetId"].(string)), true
	case "Subscription.riskEventNotifications":
		if e.complexity.Subscription.RiskEventNotifications == nil {
			break
		}

		args, err := ec.field_Subscription_riskEventNotifications_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.RiskEventNotifications(childComplexity, args["fleetId"].(string)), true
	case "Subscription.vehicleUpdates":
		if e.complexity.Subscription.VehicleUpdates == nil {
			break
		}

		args, err := ec.field_Subscription_vehicleUpdates_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.VehicleUpdates(childComplexity, args["vehicleId"].(string)), true

	case "TelemetryEvent.acceleration":
		if e.complexity.TelemetryEvent.Acceleration == nil {
			break
		}

		return e.complexity.TelemetryEvent.Acceleration(childComplexity), true
	case "TelemetryEvent.createdAt":
		if e.complexity.TelemetryEvent.CreatedAt == nil {
			break
		}

		return e.complexity.TelemetryEvent.CreatedAt(childComplexity), true
	case "TelemetryEvent.data":
		if e.complexity.TelemetryEvent.Data == nil {
			break
		}

		return e.complexity.TelemetryEvent.Data(childComplexity), true
	case "TelemetryEvent.eventType":
		if e.complexity.TelemetryEvent.EventType == nil {
			break
		}

		return e.complexity.TelemetryEvent.EventType(childComplexity), true
	case "TelemetryEvent.id":
		if e.complexity.TelemetryEvent.ID == nil {
			break
		}

		return e.complexity.TelemetryEvent.ID(childComplexity), true
	case "TelemetryEvent.latitude":
		if e.complexity.TelemetryEvent.Latitude == nil {
			break
		}

		return e.complexity.TelemetryEvent.Latitude(childComplexity), true
	case "TelemetryEvent.longitude":
		if e.complexity.TelemetryEvent.Longitude == nil {
			break
		}

		return e.complexity.TelemetryEvent.Longitude(childComplexity), true
	case "TelemetryEvent.processedAt":
		if e.complexity.TelemetryEvent.ProcessedAt == nil {
			break
		}

		return e.complexity.TelemetryEvent.ProcessedAt(childComplexity), true
	case "TelemetryEvent.speed":
		if e.complexity.TelemetryEvent.Speed == nil {
			break
		}

		return e.complexity.TelemetryEvent.Speed(childComplexity), true
	case "TelemetryEvent.timestamp":
		if e.complexity.TelemetryEvent.Timestamp == nil {
			break
		}

		return e.complexity.TelemetryEvent.Timestamp(childComplexity), true
	case "TelemetryEvent.vehicle":
		if e.complexity.TelemetryEvent.Vehicle == nil {
			break
		}

		return e.complexity.TelemetryEvent.Vehicle(childComplexity), true
	case "TelemetryEvent.vehicleId":
		if e.complexity.TelemetryEvent.VehicleID == nil {
			break
		}

		return e.complexity.TelemetryEvent.VehicleID(childComplexity), true

	case "Vehicle.createdAt":
		if e.complexity.Vehicle.CreatedAt == nil {
			break
		}

		return e.complexity.Vehicle.CreatedAt(childComplexity), true
	case "Vehicle.currentLocation":
		if e.complexity.Vehicle.CurrentLocation == nil {
			break
		}

		return e.complexity.Vehicle.CurrentLocation(childComplexity), true
	case "Vehicle.driver":
		if e.complexity.Vehicle.Driver == nil {
			break
		}

		return e.complexity.Vehicle.Driver(childComplexity), true
	case "Vehicle.driverId":
		if e.complexity.Vehicle.DriverID == nil {
			break
		}

		return e.complexity.Vehicle.DriverID(childComplexity), true
	case "Vehicle.fleet":
		if e.complexity.Vehicle.Fleet == nil {
			break
		}

		return e.complexity.Vehicle.Fleet(childComplexity), true
	case "Vehicle.fleetId":
		if e.complexity.Vehicle.FleetID == nil {
			break
		}

		return e.complexity.Vehicle.FleetID(childComplexity), true
	case "Vehicle.id":
		if e.complexity.Vehicle.ID == nil {
			break
		}

		return e.complexity.Vehicle.ID(childComplexity), true
	case "Vehicle.lastTelemetry":
		if e.complexity.Vehicle.LastTelemetry == nil {
			break
		}

		return e.complexity.Vehicle.LastTelemetry(childComplexity), true
	case "Vehicle.licensePlate":
		if e.complexity.Vehicle.LicensePlate == nil {
			break
		}

		return e.complexity.Vehicle.LicensePlate(childComplexity), true
	case "Vehicle.make":
		if e.complexity.Vehicle.Make == nil {
			break
		}

		return e.complexity.Vehicle.Make(childComplexity), true
	case "Vehicle.model":
		if e.complexity.Vehicle.Model == nil {
			break
		}

		return e.complexity.Vehicle.Model(childComplexity), true
	case "Vehicle.riskScore":
		if e.complexity.Vehicle.RiskScore == nil {
			break
		}

		return e.complexity.Vehicle.RiskScore(childComplexity), true
	case "Vehicle.status":
		if e.complexity.Vehicle.Status == nil {
			break
		}

		return e.complexity.Vehicle.Status(childComplexity), true
	case "Vehicle.updatedAt":
		if e.complexity.Vehicle.UpdatedAt == nil {
			break
		}

		return e.complexity.Vehicle.UpdatedAt(childComplexity), true
	case "Vehicle.vin":
		if e.complexity.Vehicle.VIN == nil {
			break
		}

		return e.complexity.Vehicle.VIN(childComplexity), true
	case "Vehicle.year":
		if e.complexity.Vehicle.Year == nil {
			break
		}

		return e.complexity.Vehicle.Year(childComplexity), true

	case "VehicleData.engineStatus":
		if e.complexity.VehicleData.EngineStatus == nil {
			break
		}

		return e.complexity.VehicleData.EngineStatus(childComplexity), true
	case "VehicleData.fuelLevel":
		if e.complexity.VehicleData.FuelLevel == nil {
			break
		}

		return e.complexity.VehicleData.FuelLevel(childComplexity), true
	case "VehicleData.heading":
		if e.complexity.VehicleData.Heading == nil {
			break
		}

		return e.complexity.VehicleData.Heading(childComplexity), true
	case "VehicleData.lastUpdate":
		if e.complexity.VehicleData.LastUpdate == nil {
			break
		}

		return e.complexity.VehicleData.LastUpdate(childComplexity), true
	case "VehicleData.location":
		if e.complexity.VehicleData.Location == nil {
			break
		}

		return e.complexity.VehicleData.Location(childComplexity), true
	case "VehicleData.speed":
		if e.complexity.VehicleData.Speed == nil {
			break
		}

		return e.complexity.VehicleData.Speed(childComplexity), true
	case "VehicleData.vehicle":
		if e.complexity.VehicleData.Vehicle == nil {
			break
		}

		return e.complexity.VehicleData.Vehicle(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	opCtx := graphql.GetOperationContext(ctx)
	ec := executionContext{opCtx, e, 0, 0, make(chan graphql.DeferredResult)}
	inputUnmarshalMap := graphql.BuildUnmarshalerMap(
		ec.unmarshalInputCreateDriverInput,
		ec.unmarshalInputCreateFleetInput,
		ec.unmarshalInputCreateVehicleInput,
		ec.unmarshalInputUpdateDriverInput,
		ec.unmarshalInputUpdateFleetInput,
		ec.unmarshalInputUpdateVehicleInput,
	)
	first := true

	switch opCtx.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			var response graphql.Response
			var data graphql.Marshaler
			if first {
				first = false
				ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
				data = ec._Query(ctx, opCtx.Operation.SelectionSet)
			} else {
				if atomic.LoadInt32(&ec.pendingDeferred) > 0 {
					result := <-ec.deferredResults
					atomic.AddInt32(&ec.pendingDeferred, -1)
					data = result.Result
					response.Path = result.Path
					response.Label = result.Label
					response.Errors = result.Errors
				} else {
					return nil
				}
			}
			var buf bytes.Buffer
			data.MarshalGQL(&buf)
			response.Data = buf.Bytes()
			if atomic.LoadInt32(&ec.deferred) > 0 {
				hasNext := atomic.LoadInt32(&ec.pendingDeferred) > 0
				response.HasNext = &hasNext
			}

			return &response
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Mutation(ctx, opCtx.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Subscription:
		next := ec._Subscription(ctx, opCtx.Operation.SelectionSet)

		var buf bytes.Buffer
		return func(ctx context.Context) *graphql.Response {
			buf.Reset()
			data := next(ctx)

			if data == nil {
				return nil
			}
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
	deferred        int32
	pendingDeferred int32
	deferredResults chan graphql.DeferredResult
}

func (ec *executionContext) processDeferredGroup(dg graphql.DeferredGroup) {
	atomic.AddInt32(&ec.pendingDeferred, 1)
	go func() {
		ctx := graphql.WithFreshResponseContext(dg.Context)
		dg.FieldSet.Dispatch(ctx)
		ds := graphql.DeferredResult{
			Path:   dg.Path,
			Label:  dg.Label,
			Result: dg.FieldSet,
			Errors: graphql.GetErrors(ctx),
		}
		// null fields should bubble up
		if dg.FieldSet.Invalids > 0 {
			ds.Result = graphql.Null
		}
		ec.deferredResults <- ds
	}()
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(ec.Schema()), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(ec.Schema(), ec.Schema().Types[name]), nil
}

//go:embed "schema.graphqls"
var sourcesFS embed.FS

func sourceData(filename string) string {
	data, err := sourcesFS.ReadFile(filename)
	if err != nil {
		panic(fmt.Sprintf("codegen problem: %s not available", filename))
	}
	return string(data)
}

var sources = []*ast.Source{
	{Name: "schema.graphqls", Input: sourceData("schema.graphqls"), BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Mutation_acknowledgeAlert_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_assignDriver_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "vehicleId", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["vehicleId"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "driverId", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["driverId"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_createDriver_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNCreateDriverInput2githubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋservicesᚋapiᚋgraphᚋmodelᚐCreateDriverInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createFleet_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNCreateFleetInput2githubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋservicesᚋapiᚋgraphᚋmodelᚐCreateFleetInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createVehicle_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNCreateVehicleInput2githubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋservicesᚋapiᚋgraphᚋmodelᚐCreateVehicleInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_dismissAlert_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateDriver_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNUpdateDriverInput2githubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋservicesᚋapiᚋgraphᚋmodelᚐUpdateDriverInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateFleet_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNUpdateFleetInput2githubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋservicesᚋapiᚋgraphᚋmodelᚐUpdateFleetInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateVehicle_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNUpdateVehicleInput2githubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋservicesᚋapiᚋgraphᚋmodelᚐUpdateVehicleInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "name", ec.unmarshalNString2string)
	if err != nil {
		return nil, err
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_alerts_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "fleetId", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["fleetId"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "status", ec.unmarshalOAlertStatus2ᚖgithubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋservicesᚋapiᚋgraphᚋmodelᚐAlertStatus)
	if err != nil {
		return nil, err
	}
	args["status"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_driverScores_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "fleetId", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["fleetId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_driver_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_drivers_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "fleetId", ec.unmarshalOID2ᚖstring)
	if err != nil {
		return nil, err
	}
	args["fleetId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_fleet_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_liveVehicleData_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "vehicleId", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["vehicleId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_riskEvents_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "vehicleId", ec.unmarshalOID2ᚖstring)
	if err != nil {
		return nil, err
	}
	args["vehicleId"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "driverId", ec.unmarshalOID2ᚖstring)
	if err != nil {
		return nil, err
	}
	args["driverId"] = arg1
	arg2, err := graphql.ProcessArgField(ctx, rawArgs, "limit", ec.unmarshalOInt2ᚖint)
	if err != nil {
		return nil, err
	}
	args["limit"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_vehicle_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_vehicles_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "fleetId", ec.unmarshalOID2ᚖstring)
	if err != nil {
		return nil, err
	}
	args["fleetId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Subscription_alertNotifications_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "fleetId", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["fleetId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Subscription_riskEventNotifications_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "fleetId", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["fleetId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Subscription_vehicleUpdates_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "vehicleId", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["vehicleId"] = arg0
	return args, nil
}

func (ec *executionContext) field___Directive_args_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "includeDeprecated", ec.unmarshalOBoolean2ᚖbool)
	if err != nil {
		return nil, err
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Field_args_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "includeDeprecated", ec.unmarshalOBoolean2ᚖbool)
	if err != nil {
		return nil, err
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "includeDeprecated", ec.unmarshalOBoolean2bool)
	if err != nil {
		return nil, err
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "includeDeprecated", ec.unmarshalOBoolean2bool)
	if err != nil {
		return nil, err
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _Alert_id(ctx context.Context, field graphql.CollectedField, obj *models.Alert) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Alert_id,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Alert().ID(ctx, obj)
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Alert_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Alert",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Alert_fleetId(ctx context.Context, field graphql.CollectedField, obj *models.Alert) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Alert_fleetId,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Alert().FleetID(ctx, obj)
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Alert_fleetId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Alert",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Alert_fleet(ctx context.Context, field graphql.CollectedField, obj *models.Alert) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Alert_fleet,
		func(ctx context.Context) (any, error) {
			return obj.Fleet, nil
		},
		nil,
		ec.marshalNFleet2githubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋpkgᚋmodelsᚐFleet,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Alert_fleet(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Alert",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Fleet_id(ctx, field)
			case "name":
				return ec.fieldContext_Fleet_name(ctx, field)
			case "companyName":
				return ec.fieldContext_Fleet_companyName(ctx, field)
			case "contactEmail":
				return ec.fieldContext_Fleet_contactEmail(ctx, field)
			case "status":
				return ec.fieldContext_Fleet_status(ctx, field)
			case "vehicles":
				return ec.fieldContext_Fleet_vehicles(ctx, field)
			case "drivers":
				return ec.fieldContext_Fleet_drivers(ctx, field)
			case "createdAt":
				return ec.fieldContext_Fleet_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Fleet_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Fleet", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Alert_vehicleId(ctx context.Context, field graphql.CollectedField, obj *models.Alert) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Alert_vehicleId,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Alert().VehicleID(ctx, obj)
		},
		nil,
		ec.marshalOID2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Alert_vehicleId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Alert",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Alert_vehicle(ctx context.Context, field graphql.CollectedField, obj *models.Alert) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Alert_vehicle,
		func(ctx context.Context) (any, error) {
			return obj.Vehicle, nil
		},
		nil,
		ec.marshalOVehicle2ᚖgithubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋpkgᚋmodelsᚐVehicle,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Alert_vehicle(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Alert",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Vehicle_id(ctx, field)
			case "vin":
				return ec.fieldContext_Vehicle_vin(ctx, field)
			case "make":
				return ec.fieldContext_Vehicle_make(ctx, field)
			case "model":
				return ec.fieldContext_Vehicle_model(ctx, field)
			case "year":
				return ec.fieldContext_Vehicle_year(ctx, field)
			case "licensePlate":
				return ec.fieldContext_Vehicle_licensePlate(ctx, field)
			case "fleetId":
				return ec.fieldContext_Vehicle_fleetId(ctx, field)
			case "fleet":
				return ec.fieldContext_Vehicle_fleet(ctx, field)
			case "driverId":
				return ec.fieldContext_Vehicle_driverId(ctx, field)
			case "driver":
				return ec.fieldContext_Vehicle_driver(ctx, field)
			case "status":
				return ec.fieldContext_Vehicle_status(ctx, field)
			case "currentLocation":
				return ec.fieldContext_Vehicle_currentLocation(ctx, field)
			case "lastTelemetry":
				return ec.fieldContext_Vehicle_lastTelemetry(ctx, field)
			case "riskScore":
				return ec.fieldContext_Vehicle_riskScore(ctx, field)
			case "createdAt":
				return ec.fieldContext_Vehicle_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Vehicle_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Vehicle", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Alert_driverId(ctx context.Context, field graphql.CollectedField, obj *models.Alert) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Alert_driverId,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Alert().DriverID(ctx, obj)
		},
		nil,
		ec.marshalOID2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Alert_driverId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Alert",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Alert_driver(ctx context.Context, field graphql.CollectedField, obj *models.Alert) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Alert_driver,
		func(ctx context.Context) (any, error) {
			return obj.Driver, nil
		},
		nil,
		ec.marshalODriver2ᚖgithubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋpkgᚋmodelsᚐDriver,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Alert_driver(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Alert",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Driver_id(ctx, field)
			case "employeeId":
				return ec.fieldContext_Driver_employeeId(ctx, field)
			case "firstName":
				return ec.fieldContext_Driver_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_Driver_lastName(ctx, field)
			case "email":
				return ec.fieldContext_Driver_email(ctx, field)
			case "phone":
				return ec.fieldContext_Driver_phone(ctx, field)
			case "licenseNumber":
				return ec.fieldContext_Driver_licenseNumber(ctx, field)
			case "fleetId":
				return ec.fieldContext_Driver_fleetId(ctx, field)
			case "fleet":
				return ec.fieldContext_Driver_fleet(ctx, field)
			case "status":
				return ec.fieldContext_Driver_status(ctx, field)
			case "riskScore":
				return ec.fieldContext_Driver_riskScore(ctx, field)
			case "currentVehicle":
				return ec.fieldContext_Driver_currentVehicle(ctx, field)
			case "driverScore":
				return ec.fieldContext_Driver_driverScore(ctx, field)
			case "createdAt":
				return ec.fieldContext_Driver_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Driver_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Driver", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Alert_riskEventId(ctx context.Context, field graphql.CollectedField, obj *models.Alert) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Alert_riskEventId,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Alert().RiskEventID(ctx, obj)
		},
		nil,
		ec.marshalOID2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Alert_riskEventId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Alert",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Alert_riskEvent(ctx context.Context, field graphql.CollectedField, obj *models.Alert) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Alert_riskEvent,
		func(ctx context.Context) (any, error) {
			return obj.RiskEvent, nil
		},
		nil,
		ec.marshalORiskEvent2ᚖgithubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋpkgᚋmodelsᚐRiskEvent,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Alert_riskEvent(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Alert",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_RiskEvent_id(ctx, field)
			case "vehicleId":
				return ec.fieldContext_RiskEvent_vehicleId(ctx, field)
			case "vehicle":
				return ec.fieldContext_RiskEvent_vehicle(ctx, field)
			case "driverId":
				return ec.fieldContext_RiskEvent_driverId(ctx, field)
			case "driver":
				return ec.fieldContext_RiskEvent_driver(ctx, field)
			case "eventType":
				return ec.fieldContext_RiskEvent_eventType(ctx, field)
			case "severity":
				return ec.fieldContext_RiskEvent_severity(ctx, field)
			case "riskScore":
				return ec.fieldContext_RiskEvent_riskScore(ctx, field)
			case "timestamp":
				return ec.fieldContext_RiskEvent_timestamp(ctx, field)
			case "latitude":
				return ec.fieldContext_RiskEvent_latitude(ctx, field)
			case "longitude":
				return ec.fieldContext_RiskEvent_longitude(ctx, field)
			case "description":
				return ec.fieldContext_RiskEvent_description(ctx, field)
			case "data":
				return ec.fieldContext_RiskEvent_data(ctx, field)
			case "status":
				return ec.fieldContext_RiskEvent_status(ctx, field)
			case "createdAt":
				return ec.fieldContext_RiskEvent_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_RiskEvent_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RiskEvent", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Alert_type(ctx context.Context, field graphql.CollectedField, obj *models.Alert) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Alert_type,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Alert().Type(ctx, obj)
		},
		nil,
		ec.marshalNAlertType2githubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋservicesᚋapiᚋgraphᚋmodelᚐAlertType,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Alert_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Alert",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type AlertType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Alert_priority(ctx context.Context, field graphql.CollectedField, obj *models.Alert) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Alert_priority,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Alert().Priority(ctx, obj)
		},
		nil,
		ec.marshalNAlertPriority2githubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋservicesᚋapiᚋgraphᚋmodelᚐAlertPriority,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Alert_priority(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Alert",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type AlertPriority does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Alert_title(ctx context.Context, field graphql.CollectedField, obj *models.Alert) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Alert_title,
		func(ctx context.Context) (any, error) {
			return obj.Title, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Alert_title(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Alert",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Alert_message(ctx context.Context, field graphql.CollectedField, obj *models.Alert) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Alert_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Alert_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Alert",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Alert_status(ctx context.Context, field graphql.CollectedField, obj *models.Alert) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Alert_status,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Alert().Status(ctx, obj)
		},
		nil,
		ec.marshalNAlertStatus2githubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋservicesᚋapiᚋgraphᚋmodelᚐAlertStatus,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Alert_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Alert",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type AlertStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Alert_createdAt(ctx context.Context, field graphql.CollectedField, obj *models.Alert) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Alert_createdAt,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Alert().CreatedAt(ctx, obj)
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Alert_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Alert",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Alert_updatedAt(ctx context.Context, field graphql.CollectedField, obj *models.Alert) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Alert_updatedAt,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Alert().UpdatedAt(ctx, obj)
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Alert_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Alert",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Driver_id(ctx context.Context, field graphql.CollectedField, obj *models.Driver) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Driver_id,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Driver().ID(ctx, obj)
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Driver_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Driver",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Driver_employeeId(ctx context.Context, field graphql.CollectedField, obj *models.Driver) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Driver_employeeId,
		func(ctx context.Context) (any, error) {
			return obj.EmployeeID, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Driver_employeeId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Driver",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Driver_firstName(ctx context.Context, field graphql.CollectedField, obj *models.Driver) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Driver_firstName,
		func(ctx context.Context) (any, error) {
			return obj.FirstName, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Driver_firstName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Driver",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Driver_lastName(ctx context.Context, field graphql.CollectedField, obj *models.Driver) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Driver_lastName,
		func(ctx context.Context) (any, error) {
			return obj.LastName, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Driver_lastName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Driver",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Driver_email(ctx context.Context, field graphql.CollectedField, obj *models.Driver) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Driver_email,
		func(ctx context.Context) (any, error) {
			return obj.Email, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Driver_email(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Driver",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Driver_phone(ctx context.Context, field graphql.CollectedField, obj *models.Driver) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Driver_phone,
		func(ctx context.Context) (any, error) {
			return obj.Phone, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Driver_phone(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Driver",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Driver_licenseNumber(ctx context.Context, field graphql.CollectedField, obj *models.Driver) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Driver_licenseNumber,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Driver().LicenseNumber(ctx, obj)
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Driver_licenseNumber(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Driver",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Driver_fleetId(ctx context.Context, field graphql.CollectedField, obj *models.Driver) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Driver_fleetId,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Driver().FleetID(ctx, obj)
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Driver_fleetId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Driver",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Driver_fleet(ctx context.Context, field graphql.CollectedField, obj *models.Driver) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Driver_fleet,
		func(ctx context.Context) (any, error) {
			return obj.Fleet, nil
		},
		nil,
		ec.marshalNFleet2githubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋpkgᚋmodelsᚐFleet,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Driver_fleet(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Driver",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Fleet_id(ctx, field)
			case "name":
				return ec.fieldContext_Fleet_name(ctx, field)
			case "companyName":
				return ec.fieldContext_Fleet_companyName(ctx, field)
			case "contactEmail":
				return ec.fieldContext_Fleet_contactEmail(ctx, field)
			case "status":
				return ec.fieldContext_Fleet_status(ctx, field)
			case "vehicles":
				return ec.fieldContext_Fleet_vehicles(ctx, field)
			case "drivers":
				return ec.fieldContext_Fleet_drivers(ctx, field)
			case "createdAt":
				return ec.fieldContext_Fleet_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Fleet_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Fleet", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Driver_status(ctx context.Context, field graphql.CollectedField, obj *models.Driver) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Driver_status,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Driver().Status(ctx, obj)
		},
		nil,
		ec.marshalNDriverStatus2githubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋservicesᚋapiᚋgraphᚋmodelᚐDriverStatus,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Driver_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Driver",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DriverStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Driver_riskScore(ctx context.Context, field graphql.CollectedField, obj *models.Driver) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Driver_riskScore,
		func(ctx context.Context) (any, error) {
			return obj.RiskScore, nil
		},
		nil,
		ec.marshalNFloat2float64,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Driver_riskScore(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Driver",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Driver_currentVehicle(ctx context.Context, field graphql.CollectedField, obj *models.Driver) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Driver_currentVehicle,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Driver().CurrentVehicle(ctx, obj)
		},
		nil,
		ec.marshalOVehicle2ᚖgithubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋpkgᚋmodelsᚐVehicle,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Driver_currentVehicle(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Driver",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Vehicle_id(ctx, field)
			case "vin":
				return ec.fieldContext_Vehicle_vin(ctx, field)
			case "make":
				return ec.fieldContext_Vehicle_make(ctx, field)
			case "model":
				return ec.fieldContext_Vehicle_model(ctx, field)
			case "year":
				return ec.fieldContext_Vehicle_year(ctx, field)
			case "licensePlate":
				return ec.fieldContext_Vehicle_licensePlate(ctx, field)
			case "fleetId":
				return ec.fieldContext_Vehicle_fleetId(ctx, field)
			case "fleet":
				return ec.fieldContext_Vehicle_fleet(ctx, field)
			case "driverId":
				return ec.fieldContext_Vehicle_driverId(ctx, field)
			case "driver":
				return ec.fieldContext_Vehicle_driver(ctx, field)
			case "status":
				return ec.fieldContext_Vehicle_status(ctx, field)
			case "currentLocation":
				return ec.fieldContext_Vehicle_currentLocation(ctx, field)
			case "lastTelemetry":
				return ec.fieldContext_Vehicle_lastTelemetry(ctx, field)
			case "riskScore":
				return ec.fieldContext_Vehicle_riskScore(ctx, field)
			case "createdAt":
				return ec.fieldContext_Vehicle_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Vehicle_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Vehicle", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Driver_driverScore(ctx context.Context, field graphql.CollectedField, obj *models.Driver) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Driver_driverScore,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Driver().DriverScore(ctx, obj)
		},
		nil,
		ec.marshalODriverScore2ᚖgithubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋpkgᚋmodelsᚐDriverScore,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Driver_driverScore(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Driver",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_DriverScore_id(ctx, field)
			case "driverId":
				return ec.fieldContext_DriverScore_driverId(ctx, field)
			case "driver":
				return ec.fieldContext_DriverScore_driver(ctx, field)
			case "overallScore":
				return ec.fieldContext_DriverScore_overallScore(ctx, field)
			case "safetyScore":
				return ec.fieldContext_DriverScore_safetyScore(ctx, field)
			case "efficiencyScore":
				return ec.fieldContext_DriverScore_efficiencyScore(ctx, field)
			case "totalMiles":
				return ec.fieldContext_DriverScore_totalMiles(ctx, field)
			case "totalTrips":
				return ec.fieldContext_DriverScore_totalTrips(ctx, field)
			case "riskEvents":
				return ec.fieldContext_DriverScore_riskEvents(ctx, field)
			case "lastUpdated":
				return ec.fieldContext_DriverScore_lastUpdated(ctx, field)
			case "createdAt":
				return ec.fieldContext_DriverScore_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_DriverScore_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DriverScore", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Driver_createdAt(ctx context.Context, field graphql.CollectedField, obj *models.Driver) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Driver_createdAt,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Driver().CreatedAt(ctx, obj)
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Driver_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Driver",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Driver_updatedAt(ctx context.Context, field graphql.CollectedField, obj *models.Driver) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Driver_updatedAt,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Driver().UpdatedAt(ctx, obj)
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Driver_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Driver",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DriverScore_id(ctx context.Context, field graphql.CollectedField, obj *models.DriverScore) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_DriverScore_id,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.DriverScore().ID(ctx, obj)
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_DriverScore_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DriverScore",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DriverScore_driverId(ctx context.Context, field graphql.CollectedField, obj *models.DriverScore) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_DriverScore_driverId,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.DriverScore().DriverID(ctx, obj)
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_DriverScore_driverId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DriverScore",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DriverScore_driver(ctx context.Context, field graphql.CollectedField, obj *models.DriverScore) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_DriverScore_driver,
		func(ctx context.Context) (any, error) {
			return obj.Driver, nil
		},
		nil,
		ec.marshalNDriver2githubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋpkgᚋmodelsᚐDriver,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_DriverScore_driver(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DriverScore",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Driver_id(ctx, field)
			case "employeeId":
				return ec.fieldContext_Driver_employeeId(ctx, field)
			case "firstName":
				return ec.fieldContext_Driver_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_Driver_lastName(ctx, field)
			case "email":
				return ec.fieldContext_Driver_email(ctx, field)
			case "phone":
				return ec.fieldContext_Driver_phone(ctx, field)
			case "licenseNumber":
				return ec.fieldContext_Driver_licenseNumber(ctx, field)
			case "fleetId":
				return ec.fieldContext_Driver_fleetId(ctx, field)
			case "fleet":
				return ec.fieldContext_Driver_fleet(ctx, field)
			case "status":
				return ec.fieldContext_Driver_status(ctx, field)
			case "riskScore":
				return ec.fieldContext_Driver_riskScore(ctx, field)
			case "currentVehicle":
				return ec.fieldContext_Driver_currentVehicle(ctx, field)
			case "driverScore":
				return ec.fieldContext_Driver_driverScore(ctx, field)
			case "createdAt":
				return ec.fieldContext_Driver_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Driver_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Driver", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DriverScore_overallScore(ctx context.Context, field graphql.CollectedField, obj *models.DriverScore) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_DriverScore_overallScore,
		func(ctx context.Context) (any, error) {
			return obj.OverallScore, nil
		},
		nil,
		ec.marshalNFloat2float64,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_DriverScore_overallScore(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DriverScore",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DriverScore_safetyScore(ctx context.Context, field graphql.CollectedField, obj *models.DriverScore) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_DriverScore_safetyScore,
		func(ctx context.Context) (any, error) {
			return obj.SafetyScore, nil
		},
		nil,
		ec.marshalNFloat2float64,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_DriverScore_safetyScore(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DriverScore",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DriverScore_efficiencyScore(ctx context.Context, field graphql.CollectedField, obj *models.DriverScore) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_DriverScore_efficiencyScore,
		func(ctx context.Context) (any, error) {
			return obj.EfficiencyScore, nil
		},
		nil,
		ec.marshalNFloat2float64,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_DriverScore_efficiencyScore(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DriverScore",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DriverScore_totalMiles(ctx context.Context, field graphql.CollectedField, obj *models.DriverScore) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_DriverScore_totalMiles,
		func(ctx context.Context) (any, error) {
			return obj.TotalMiles, nil
		},
		nil,
		ec.marshalNFloat2float64,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_DriverScore_totalMiles(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DriverScore",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DriverScore_totalTrips(ctx context.Context, field graphql.CollectedField, obj *models.DriverScore) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_DriverScore_totalTrips,
		func(ctx context.Context) (any, error) {
			return obj.TotalTrips, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_DriverScore_totalTrips(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DriverScore",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DriverScore_riskEvents(ctx context.Context, field graphql.CollectedField, obj *models.DriverScore) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_DriverScore_riskEvents,
		func(ctx context.Context) (any, error) {
			return obj.RiskEvents, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_DriverScore_riskEvents(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DriverScore",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DriverScore_lastUpdated(ctx context.Context, field graphql.CollectedField, obj *models.DriverScore) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_DriverScore_lastUpdated,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.DriverScore().LastUpdated(ctx, obj)
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_DriverScore_lastUpdated(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DriverScore",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DriverScore_createdAt(ctx context.Context, field graphql.CollectedField, obj *models.DriverScore) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_DriverScore_createdAt,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.DriverScore().CreatedAt(ctx, obj)
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_DriverScore_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DriverScore",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DriverScore_updatedAt(ctx context.Context, field graphql.CollectedField, obj *models.DriverScore) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_DriverScore_updatedAt,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.DriverScore().UpdatedAt(ctx, obj)
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_DriverScore_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DriverScore",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Fleet_id(ctx context.Context, field graphql.CollectedField, obj *models.Fleet) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Fleet_id,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Fleet().ID(ctx, obj)
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Fleet_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Fleet",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Fleet_name(ctx context.Context, field graphql.CollectedField, obj *models.Fleet) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Fleet_name,
		func(ctx context.Context) (any, error) {
			return obj.Name, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Fleet_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Fleet",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Fleet_companyName(ctx context.Context, field graphql.CollectedField, obj *models.Fleet) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Fleet_companyName,
		func(ctx context.Context) (any, error) {
			return obj.CompanyName, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Fleet_companyName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Fleet",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Fleet_contactEmail(ctx context.Context, field graphql.CollectedField, obj *models.Fleet) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Fleet_contactEmail,
		func(ctx context.Context) (any, error) {
			return obj.ContactEmail, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Fleet_contactEmail(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Fleet",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Fleet_status(ctx context.Context, field graphql.CollectedField, obj *models.Fleet) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Fleet_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Fleet_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Fleet",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Fleet_vehicles(ctx context.Context, field graphql.CollectedField, obj *models.Fleet) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Fleet_vehicles,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Fleet().Vehicles(ctx, obj)
		},
		nil,
		ec.marshalNVehicle2ᚕᚖgithubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋpkgᚋmodelsᚐVehicleᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Fleet_vehicles(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Fleet",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Vehicle_id(ctx, field)
			case "vin":
				return ec.fieldContext_Vehicle_vin(ctx, field)
			case "make":
				return ec.fieldContext_Vehicle_make(ctx, field)
			case "model":
				return ec.fieldContext_Vehicle_model(ctx, field)
			case "year":
				return ec.fieldContext_Vehicle_year(ctx, field)
			case "licensePlate":
				return ec.fieldContext_Vehicle_licensePlate(ctx, field)
			case "fleetId":
				return ec.fieldContext_Vehicle_fleetId(ctx, field)
			case "fleet":
				return ec.fieldContext_Vehicle_fleet(ctx, field)
			case "driverId":
				return ec.fieldContext_Vehicle_driverId(ctx, field)
			case "driver":
				return ec.fieldContext_Vehicle_driver(ctx, field)
			case "status":
				return ec.fieldContext_Vehicle_status(ctx, field)
			case "currentLocation":
				return ec.fieldContext_Vehicle_currentLocation(ctx, field)
			case "lastTelemetry":
				return ec.fieldContext_Vehicle_lastTelemetry(ctx, field)
			case "riskScore":
				return ec.fieldContext_Vehicle_riskScore(ctx, field)
			case "createdAt":
				return ec.fieldContext_Vehicle_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Vehicle_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Vehicle", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Fleet_drivers(ctx context.Context, field graphql.CollectedField, obj *models.Fleet) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Fleet_drivers,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Fleet().Drivers(ctx, obj)
		},
		nil,
		ec.marshalNDriver2ᚕᚖgithubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋpkgᚋmodelsᚐDriverᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Fleet_drivers(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Fleet",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Driver_id(ctx, field)
			case "employeeId":
				return ec.fieldContext_Driver_employeeId(ctx, field)
			case "firstName":
				return ec.fieldContext_Driver_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_Driver_lastName(ctx, field)
			case "email":
				return ec.fieldContext_Driver_email(ctx, field)
			case "phone":
				return ec.fieldContext_Driver_phone(ctx, field)
			case "licenseNumber":
				return ec.fieldContext_Driver_licenseNumber(ctx, field)
			case "fleetId":
				return ec.fieldContext_Driver_fleetId(ctx, field)
			case "fleet":
				return ec.fieldContext_Driver_fleet(ctx, field)
			case "status":
				return ec.fieldContext_Driver_status(ctx, field)
			case "riskScore":
				return ec.fieldContext_Driver_riskScore(ctx, field)
			case "currentVehicle":
				return ec.fieldContext_Driver_currentVehicle(ctx, field)
			case "driverScore":
				return ec.fieldContext_Driver_driverScore(ctx, field)
			case "createdAt":
				return ec.fieldContext_Driver_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Driver_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Driver", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Fleet_createdAt(ctx context.Context, field graphql.CollectedField, obj *models.Fleet) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Fleet_createdAt,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Fleet().CreatedAt(ctx, obj)
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Fleet_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Fleet",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Fleet_updatedAt(ctx context.Context, field graphql.CollectedField, obj *models.Fleet) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Fleet_updatedAt,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Fleet().UpdatedAt(ctx, obj)
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Fleet_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Fleet",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Location_latitude(ctx context.Context, field graphql.CollectedField, obj *model.Location) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Location_latitude,
		func(ctx context.Context) (any, error) {
			return obj.Latitude, nil
		},
		nil,
		ec.marshalNFloat2float64,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Location_latitude(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Location",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Location_longitude(ctx context.Context, field graphql.CollectedField, obj *model.Location) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Location_longitude,
		func(ctx context.Context) (any, error) {
			return obj.Longitude, nil
		},
		nil,
		ec.marshalNFloat2float64,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Location_longitude(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Location",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Location_address(ctx context.Context, field graphql.CollectedField, obj *model.Location) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Location_address,
		func(ctx context.Context) (any, error) {
			return obj.Address, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Location_address(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Location",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createFleet(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_createFleet,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().CreateFleet(ctx, fc.Args["input"].(model.CreateFleetInput))
		},
		nil,
		ec.marshalNFleet2ᚖgithubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋpkgᚋmodelsᚐFleet,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_createFleet(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Fleet_id(ctx, field)
			case "name":
				return ec.fieldContext_Fleet_name(ctx, field)
			case "companyName":
				return ec.fieldContext_Fleet_companyName(ctx, field)
			case "contactEmail":
				return ec.fieldContext_Fleet_contactEmail(ctx, field)
			case "status":
				return ec.fieldContext_Fleet_status(ctx, field)
			case "vehicles":
				return ec.fieldContext_Fleet_vehicles(ctx, field)
			case "drivers":
				return ec.fieldContext_Fleet_drivers(ctx, field)
			case "createdAt":
				return ec.fieldContext_Fleet_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Fleet_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Fleet", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createFleet_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateFleet(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_updateFleet,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().UpdateFleet(ctx, fc.Args["id"].(string), fc.Args["input"].(model.UpdateFleetInput))
		},
		nil,
		ec.marshalNFleet2ᚖgithubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋpkgᚋmodelsᚐFleet,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_updateFleet(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Fleet_id(ctx, field)
			case "name":
				return ec.fieldContext_Fleet_name(ctx, field)
			case "companyName":
				return ec.fieldContext_Fleet_companyName(ctx, field)
			case "contactEmail":
				return ec.fieldContext_Fleet_contactEmail(ctx, field)
			case "status":
				return ec.fieldContext_Fleet_status(ctx, field)
			case "vehicles":
				return ec.fieldContext_Fleet_vehicles(ctx, field)
			case "drivers":
				return ec.fieldContext_Fleet_drivers(ctx, field)
			case "createdAt":
				return ec.fieldContext_Fleet_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Fleet_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Fleet", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateFleet_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createVehicle(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_createVehicle,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().CreateVehicle(ctx, fc.Args["input"].(model.CreateVehicleInput))
		},
		nil,
		ec.marshalNVehicle2ᚖgithubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋpkgᚋmodelsᚐVehicle,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_createVehicle(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Vehicle_id(ctx, field)
			case "vin":
				return ec.fieldContext_Vehicle_vin(ctx, field)
			case "make":
				return ec.fieldContext_Vehicle_make(ctx, field)
			case "model":
				return ec.fieldContext_Vehicle_model(ctx, field)
			case "year":
				return ec.fieldContext_Vehicle_year(ctx, field)
			case "licensePlate":
				return ec.fieldContext_Vehicle_licensePlate(ctx, field)
			case "fleetId":
				return ec.fieldContext_Vehicle_fleetId(ctx, field)
			case "fleet":
				return ec.fieldContext_Vehicle_fleet(ctx, field)
			case "driverId":
				return ec.fieldContext_Vehicle_driverId(ctx, field)
			case "driver":
				return ec.fieldContext_Vehicle_driver(ctx, field)
			case "status":
				return ec.fieldContext_Vehicle_status(ctx, field)
			case "currentLocation":
				return ec.fieldContext_Vehicle_currentLocation(ctx, field)
			case "lastTelemetry":
				return ec.fieldContext_Vehicle_lastTelemetry(ctx, field)
			case "riskScore":
				return ec.fieldContext_Vehicle_riskScore(ctx, field)
			case "createdAt":
				return ec.fieldContext_Vehicle_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Vehicle_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Vehicle", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createVehicle_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateVehicle(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_updateVehicle,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().UpdateVehicle(ctx, fc.Args["id"].(string), fc.Args["input"].(model.UpdateVehicleInput))
		},
		nil,
		ec.marshalNVehicle2ᚖgithubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋpkgᚋmodelsᚐVehicle,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_updateVehicle(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Vehicle_id(ctx, field)
			case "vin":
				return ec.fieldContext_Vehicle_vin(ctx, field)
			case "make":
				return ec.fieldContext_Vehicle_make(ctx, field)
			case "model":
				return ec.fieldContext_Vehicle_model(ctx, field)
			case "year":
				return ec.fieldContext_Vehicle_year(ctx, field)
			case "licensePlate":
				return ec.fieldContext_Vehicle_licensePlate(ctx, field)
			case "fleetId":
				return ec.fieldContext_Vehicle_fleetId(ctx, field)
			case "fleet":
				return ec.fieldContext_Vehicle_fleet(ctx, field)
			case "driverId":
				return ec.fieldContext_Vehicle_driverId(ctx, field)
			case "driver":
				return ec.fieldContext_Vehicle_driver(ctx, field)
			case "status":
				return ec.fieldContext_Vehicle_status(ctx, field)
			case "currentLocation":
				return ec.fieldContext_Vehicle_currentLocation(ctx, field)
			case "lastTelemetry":
				return ec.fieldContext_Vehicle_lastTelemetry(ctx, field)
			case "riskScore":
				return ec.fieldContext_Vehicle_riskScore(ctx, field)
			case "createdAt":
				return ec.fieldContext_Vehicle_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Vehicle_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Vehicle", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateVehicle_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_assignDriver(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_assignDriver,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().AssignDriver(ctx, fc.Args["vehicleId"].(string), fc.Args["driverId"].(string))
		},
		nil,
		ec.marshalNVehicle2ᚖgithubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋpkgᚋmodelsᚐVehicle,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_assignDriver(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Vehicle_id(ctx, field)
			case "vin":
				return ec.fieldContext_Vehicle_vin(ctx, field)
			case "make":
				return ec.fieldContext_Vehicle_make(ctx, field)
			case "model":
				return ec.fieldContext_Vehicle_model(ctx, field)
			case "year":
				return ec.fieldContext_Vehicle_year(ctx, field)
			case "licensePlate":
				return ec.fieldContext_Vehicle_licensePlate(ctx, field)
			case "fleetId":
				return ec.fieldContext_Vehicle_fleetId(ctx, field)
			case "fleet":
				return ec.fieldContext_Vehicle_fleet(ctx, field)
			case "driverId":
				return ec.fieldContext_Vehicle_driverId(ctx, field)
			case "driver":
				return ec.fieldContext_Vehicle_driver(ctx, field)
			case "status":
				return ec.fieldContext_Vehicle_status(ctx, field)
			case "currentLocation":
				return ec.fieldContext_Vehicle_currentLocation(ctx, field)
			case "lastTelemetry":
				return ec.fieldContext_Vehicle_lastTelemetry(ctx, field)
			case "riskScore":
				return ec.fieldContext_Vehicle_riskScore(ctx, field)
			case "createdAt":
				return ec.fieldContext_Vehicle_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Vehicle_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Vehicle", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_assignDriver_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createDriver(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_createDriver,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().CreateDriver(ctx, fc.Args["input"].(model.CreateDriverInput))
		},
		nil,
		ec.marshalNDriver2ᚖgithubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋpkgᚋmodelsᚐDriver,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_createDriver(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Driver_id(ctx, field)
			case "employeeId":
				return ec.fieldContext_Driver_employeeId(ctx, field)
			case "firstName":
				return ec.fieldContext_Driver_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_Driver_lastName(ctx, field)
			case "email":
				return ec.fieldContext_Driver_email(ctx, field)
			case "phone":
				return ec.fieldContext_Driver_phone(ctx, field)
			case "licenseNumber":
				return ec.fieldContext_Driver_licenseNumber(ctx, field)
			case "fleetId":
				return ec.fieldContext_Driver_fleetId(ctx, field)
			case "fleet":
				return ec.fieldContext_Driver_fleet(ctx, field)
			case "status":
				return ec.fieldContext_Driver_status(ctx, field)
			case "riskScore":
				return ec.fieldContext_Driver_riskScore(ctx, field)
			case "currentVehicle":
				return ec.fieldContext_Driver_currentVehicle(ctx, field)
			case "driverScore":
				return ec.fieldContext_Driver_driverScore(ctx, field)
			case "createdAt":
				return ec.fieldContext_Driver_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Driver_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Driver", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createDriver_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateDriver(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_updateDriver,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().UpdateDriver(ctx, fc.Args["id"].(string), fc.Args["input"].(model.UpdateDriverInput))
		},
		nil,
		ec.marshalNDriver2ᚖgithubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋpkgᚋmodelsᚐDriver,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_updateDriver(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Driver_id(ctx, field)
			case "employeeId":
				return ec.fieldContext_Driver_employeeId(ctx, field)
			case "firstName":
				return ec.fieldContext_Driver_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_Driver_lastName(ctx, field)
			case "email":
				return ec.fieldContext_Driver_email(ctx, field)
			case "phone":
				return ec.fieldContext_Driver_phone(ctx, field)
			case "licenseNumber":
				return ec.fieldContext_Driver_licenseNumber(ctx, field)
			case "fleetId":
				return ec.fieldContext_Driver_fleetId(ctx, field)
			case "fleet":
				return ec.fieldContext_Driver_fleet(ctx, field)
			case "status":
				return ec.fieldContext_Driver_status(ctx, field)
			case "riskScore":
				return ec.fieldContext_Driver_riskScore(ctx, field)
			case "currentVehicle":
				return ec.fieldContext_Driver_currentVehicle(ctx, field)
			case "driverScore":
				return ec.fieldContext_Driver_driverScore(ctx, field)
			case "createdAt":
				return ec.fieldContext_Driver_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Driver_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Driver", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateDriver_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_acknowledgeAlert(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_acknowledgeAlert,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().AcknowledgeAlert(ctx, fc.Args["id"].(string))
		},
		nil,
		ec.marshalNAlert2ᚖgithubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋpkgᚋmodelsᚐAlert,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_acknowledgeAlert(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Alert_id(ctx, field)
			case "fleetId":
				return ec.fieldContext_Alert_fleetId(ctx, field)
			case "fleet":
				return ec.fieldContext_Alert_fleet(ctx, field)
			case "vehicleId":
				return ec.fieldContext_Alert_vehicleId(ctx, field)
			case "vehicle":
				return ec.fieldContext_Alert_vehicle(ctx, field)
			case "driverId":
				return ec.fieldContext_Alert_driverId(ctx, field)
			case "driver":
				return ec.fieldContext_Alert_driver(ctx, field)
			case "riskEventId":
				return ec.fieldContext_Alert_riskEventId(ctx, field)
			case "riskEvent":
				return ec.fieldContext_Alert_riskEvent(ctx, field)
			case "type":
				return ec.fieldContext_Alert_type(ctx, field)
			case "priority":
				return ec.fieldContext_Alert_priority(ctx, field)
			case "title":
				return ec.fieldContext_Alert_title(ctx, field)
			case "message":
				return ec.fieldContext_Alert_message(ctx, field)
			case "status":
				return ec.fieldContext_Alert_status(ctx, field)
			case "createdAt":
				return ec.fieldContext_Alert_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Alert_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Alert", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_acknowledgeAlert_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_dismissAlert(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_dismissAlert,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().DismissAlert(ctx, fc.Args["id"].(string))
		},
		nil,
		ec.marshalNAlert2ᚖgithubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋpkgᚋmodelsᚐAlert,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_dismissAlert(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Alert_id(ctx, field)
			case "fleetId":
				return ec.fieldContext_Alert_fleetId(ctx, field)
			case "fleet":
				return ec.fieldContext_Alert_fleet(ctx, field)
			case "vehicleId":
				return ec.fieldContext_Alert_vehicleId(ctx, field)
			case "vehicle":
				return ec.fieldContext_Alert_vehicle(ctx, field)
			case "driverId":
				return ec.fieldContext_Alert_driverId(ctx, field)
			case "driver":
				return ec.fieldContext_Alert_driver(ctx, field)
			case "riskEventId":
				return ec.fieldContext_Alert_riskEventId(ctx, field)
			case "riskEvent":
				return ec.fieldContext_Alert_riskEvent(ctx, field)
			case "type":
				return ec.fieldContext_Alert_type(ctx, field)
			case "priority":
				return ec.fieldContext_Alert_priority(ctx, field)
			case "title":
				return ec.fieldContext_Alert_title(ctx, field)
			case "message":
				return ec.fieldContext_Alert_message(ctx, field)
			case "status":
				return ec.fieldContext_Alert_status(ctx, field)
			case "createdAt":
				return ec.fieldContext_Alert_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Alert_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Alert", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_dismissAlert_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_fleets(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_fleets,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Query().Fleets(ctx)
		},
		nil,
		ec.marshalNFleet2ᚕᚖgithubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋpkgᚋmodelsᚐFleetᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_fleets(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Fleet_id(ctx, field)
			case "name":
				return ec.fieldContext_Fleet_name(ctx, field)
			case "companyName":
				return ec.fieldContext_Fleet_companyName(ctx, field)
			case "contactEmail":
				return ec.fieldContext_Fleet_contactEmail(ctx, field)
			case "status":
				return ec.fieldContext_Fleet_status(ctx, field)
			case "vehicles":
				return ec.fieldContext_Fleet_vehicles(ctx, field)
			case "drivers":
				return ec.fieldContext_Fleet_drivers(ctx, field)
			case "createdAt":
				return ec.fieldContext_Fleet_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Fleet_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Fleet", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_fleet(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_fleet,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().Fleet(ctx, fc.Args["id"].(string))
		},
		nil,
		ec.marshalOFleet2ᚖgithubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋpkgᚋmodelsᚐFleet,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_fleet(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Fleet_id(ctx, field)
			case "name":
				return ec.fieldContext_Fleet_name(ctx, field)
			case "companyName":
				return ec.fieldContext_Fleet_companyName(ctx, field)
			case "contactEmail":
				return ec.fieldContext_Fleet_contactEmail(ctx, field)
			case "status":
				return ec.fieldContext_Fleet_status(ctx, field)
			case "vehicles":
				return ec.fieldContext_Fleet_vehicles(ctx, field)
			case "drivers":
				return ec.fieldContext_Fleet_drivers(ctx, field)
			case "createdAt":
				return ec.fieldContext_Fleet_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Fleet_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Fleet", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_fleet_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_vehicles(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_vehicles,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().Vehicles(ctx, fc.Args["fleetId"].(*string))
		},
		nil,
		ec.marshalNVehicle2ᚕᚖgithubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋpkgᚋmodelsᚐVehicleᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_vehicles(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Vehicle_id(ctx, field)
			case "vin":
				return ec.fieldContext_Vehicle_vin(ctx, field)
			case "make":
				return ec.fieldContext_Vehicle_make(ctx, field)
			case "model":
				return ec.fieldContext_Vehicle_model(ctx, field)
			case "year":
				return ec.fieldContext_Vehicle_year(ctx, field)
			case "licensePlate":
				return ec.fieldContext_Vehicle_licensePlate(ctx, field)
			case "fleetId":
				return ec.fieldContext_Vehicle_fleetId(ctx, field)
			case "fleet":
				return ec.fieldContext_Vehicle_fleet(ctx, field)
			case "driverId":
				return ec.fieldContext_Vehicle_driverId(ctx, field)
			case "driver":
				return ec.fieldContext_Vehicle_driver(ctx, field)
			case "status":
				return ec.fieldContext_Vehicle_status(ctx, field)
			case "currentLocation":
				return ec.fieldContext_Vehicle_currentLocation(ctx, field)
			case "lastTelemetry":
				return ec.fieldContext_Vehicle_lastTelemetry(ctx, field)
			case "riskScore":
				return ec.fieldContext_Vehicle_riskScore(ctx, field)
			case "createdAt":
				return ec.fieldContext_Vehicle_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Vehicle_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Vehicle", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_vehicles_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_vehicle(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_vehicle,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().Vehicle(ctx, fc.Args["id"].(string))
		},
		nil,
		ec.marshalOVehicle2ᚖgithubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋpkgᚋmodelsᚐVehicle,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_vehicle(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Vehicle_id(ctx, field)
			case "vin":
				return ec.fieldContext_Vehicle_vin(ctx, field)
			case "make":
				return ec.fieldContext_Vehicle_make(ctx, field)
			case "model":
				return ec.fieldContext_Vehicle_model(ctx, field)
			case "year":
				return ec.fieldContext_Vehicle_year(ctx, field)
			case "licensePlate":
				return ec.fieldContext_Vehicle_licensePlate(ctx, field)
			case "fleetId":
				return ec.fieldContext_Vehicle_fleetId(ctx, field)
			case "fleet":
				return ec.fieldContext_Vehicle_fleet(ctx, field)
			case "driverId":
				return ec.fieldContext_Vehicle_driverId(ctx, field)
			case "driver":
				return ec.fieldContext_Vehicle_driver(ctx, field)
			case "status":
				return ec.fieldContext_Vehicle_status(ctx, field)
			case "currentLocation":
				return ec.fieldContext_Vehicle_currentLocation(ctx, field)
			case "lastTelemetry":
				return ec.fieldContext_Vehicle_lastTelemetry(ctx, field)
			case "riskScore":
				return ec.fieldContext_Vehicle_riskScore(ctx, field)
			case "createdAt":
				return ec.fieldContext_Vehicle_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Vehicle_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Vehicle", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_vehicle_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_drivers(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_drivers,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().Drivers(ctx, fc.Args["fleetId"].(*string))
		},
		nil,
		ec.marshalNDriver2ᚕᚖgithubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋpkgᚋmodelsᚐDriverᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_drivers(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Driver_id(ctx, field)
			case "employeeId":
				return ec.fieldContext_Driver_employeeId(ctx, field)
			case "firstName":
				return ec.fieldContext_Driver_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_Driver_lastName(ctx, field)
			case "email":
				return ec.fieldContext_Driver_email(ctx, field)
			case "phone":
				return ec.fieldContext_Driver_phone(ctx, field)
			case "licenseNumber":
				return ec.fieldContext_Driver_licenseNumber(ctx, field)
			case "fleetId":
				return ec.fieldContext_Driver_fleetId(ctx, field)
			case "fleet":
				return ec.fieldContext_Driver_fleet(ctx, field)
			case "status":
				return ec.fieldContext_Driver_status(ctx, field)
			case "riskScore":
				return ec.fieldContext_Driver_riskScore(ctx, field)
			case "currentVehicle":
				return ec.fieldContext_Driver_currentVehicle(ctx, field)
			case "driverScore":
				return ec.fieldContext_Driver_driverScore(ctx, field)
			case "createdAt":
				return ec.fieldContext_Driver_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Driver_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Driver", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_drivers_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_driver(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_driver,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().Driver(ctx, fc.Args["id"].(string))
		},
		nil,
		ec.marshalODriver2ᚖgithubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋpkgᚋmodelsᚐDriver,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_driver(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Driver_id(ctx, field)
			case "employeeId":
				return ec.fieldContext_Driver_employeeId(ctx, field)
			case "firstName":
				return ec.fieldContext_Driver_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_Driver_lastName(ctx, field)
			case "email":
				return ec.fieldContext_Driver_email(ctx, field)
			case "phone":
				return ec.fieldContext_Driver_phone(ctx, field)
			case "licenseNumber":
				return ec.fieldContext_Driver_licenseNumber(ctx, field)
			case "fleetId":
				return ec.fieldContext_Driver_fleetId(ctx, field)
			case "fleet":
				return ec.fieldContext_Driver_fleet(ctx, field)
			case "status":
				return ec.fieldContext_Driver_status(ctx, field)
			case "riskScore":
				return ec.fieldContext_Driver_riskScore(ctx, field)
			case "currentVehicle":
				return ec.fieldContext_Driver_currentVehicle(ctx, field)
			case "driverScore":
				return ec.fieldContext_Driver_driverScore(ctx, field)
			case "createdAt":
				return ec.fieldContext_Driver_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Driver_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Driver", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_driver_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_riskEvents(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_riskEvents,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().RiskEvents(ctx, fc.Args["vehicleId"].(*string), fc.Args["driverId"].(*string), fc.Args["limit"].(*int))
		},
		nil,
		ec.marshalNRiskEvent2ᚕᚖgithubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋpkgᚋmodelsᚐRiskEventᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_riskEvents(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_RiskEvent_id(ctx, field)
			case "vehicleId":
				return ec.fieldContext_RiskEvent_vehicleId(ctx, field)
			case "vehicle":
				return ec.fieldContext_RiskEvent_vehicle(ctx, field)
			case "driverId":
				return ec.fieldContext_RiskEvent_driverId(ctx, field)
			case "driver":
				return ec.fieldContext_RiskEvent_driver(ctx, field)
			case "eventType":
				return ec.fieldContext_RiskEvent_eventType(ctx, field)
			case "severity":
				return ec.fieldContext_RiskEvent_severity(ctx, field)
			case "riskScore":
				return ec.fieldContext_RiskEvent_riskScore(ctx, field)
			case "timestamp":
				return ec.fieldContext_RiskEvent_timestamp(ctx, field)
			case "latitude":
				return ec.fieldContext_RiskEvent_latitude(ctx, field)
			case "longitude":
				return ec.fieldContext_RiskEvent_longitude(ctx, field)
			case "description":
				return ec.fieldContext_RiskEvent_description(ctx, field)
			case "data":
				return ec.fieldContext_RiskEvent_data(ctx, field)
			case "status":
				return ec.fieldContext_RiskEvent_status(ctx, field)
			case "createdAt":
				return ec.fieldContext_RiskEvent_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_RiskEvent_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RiskEvent", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_riskEvents_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_alerts(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_alerts,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().Alerts(ctx, fc.Args["fleetId"].(string), fc.Args["status"].(*model.AlertStatus))
		},
		nil,
		ec.marshalNAlert2ᚕᚖgithubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋpkgᚋmodelsᚐAlertᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_alerts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Alert_id(ctx, field)
			case "fleetId":
				return ec.fieldContext_Alert_fleetId(ctx, field)
			case "fleet":
				return ec.fieldContext_Alert_fleet(ctx, field)
			case "vehicleId":
				return ec.fieldContext_Alert_vehicleId(ctx, field)
			case "vehicle":
				return ec.fieldContext_Alert_vehicle(ctx, field)
			case "driverId":
				return ec.fieldContext_Alert_driverId(ctx, field)
			case "driver":
				return ec.fieldContext_Alert_driver(ctx, field)
			case "riskEventId":
				return ec.fieldContext_Alert_riskEventId(ctx, field)
			case "riskEvent":
				return ec.fieldContext_Alert_riskEvent(ctx, field)
			case "type":
				return ec.fieldContext_Alert_type(ctx, field)
			case "priority":
				return ec.fieldContext_Alert_priority(ctx, field)
			case "title":
				return ec.fieldContext_Alert_title(ctx, field)
			case "message":
				return ec.fieldContext_Alert_message(ctx, field)
			case "status":
				return ec.fieldContext_Alert_status(ctx, field)
			case "createdAt":
				return ec.fieldContext_Alert_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Alert_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Alert", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_alerts_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_driverScores(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_driverScores,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().DriverScores(ctx, fc.Args["fleetId"].(string))
		},
		nil,
		ec.marshalNDriverScore2ᚕᚖgithubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋpkgᚋmodelsᚐDriverScoreᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_driverScores(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_DriverScore_id(ctx, field)
			case "driverId":
				return ec.fieldContext_DriverScore_driverId(ctx, field)
			case "driver":
				return ec.fieldContext_DriverScore_driver(ctx, field)
			case "overallScore":
				return ec.fieldContext_DriverScore_overallScore(ctx, field)
			case "safetyScore":
				return ec.fieldContext_DriverScore_safetyScore(ctx, field)
			case "efficiencyScore":
				return ec.fieldContext_DriverScore_efficiencyScore(ctx, field)
			case "totalMiles":
				return ec.fieldContext_DriverScore_totalMiles(ctx, field)
			case "totalTrips":
				return ec.fieldContext_DriverScore_totalTrips(ctx, field)
			case "riskEvents":
				return ec.fieldContext_DriverScore_riskEvents(ctx, field)
			case "lastUpdated":
				return ec.fieldContext_DriverScore_lastUpdated(ctx, field)
			case "createdAt":
				return ec.fieldContext_DriverScore_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_DriverScore_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DriverScore", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_driverScores_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_liveVehicleData(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_liveVehicleData,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().LiveVehicleData(ctx, fc.Args["vehicleId"].(string))
		},
		nil,
		ec.marshalOVehicleData2ᚖgithubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋservicesᚋapiᚋgraphᚋmodelᚐVehicleData,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_liveVehicleData(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "vehicle":
				return ec.fieldContext_VehicleData_vehicle(ctx, field)
			case "location":
				return ec.fieldContext_VehicleData_location(ctx, field)
			case "speed":
				return ec.fieldContext_VehicleData_speed(ctx, field)
			case "heading":
				return ec.fieldContext_VehicleData_heading(ctx, field)
			case "engineStatus":
				return ec.fieldContext_VehicleData_engineStatus(ctx, field)
			case "fuelLevel":
				return ec.fieldContext_VehicleData_fuelLevel(ctx, field)
			case "lastUpdate":
				return ec.fieldContext_VehicleData_lastUpdate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type VehicleData", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_liveVehicleData_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query___type,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.introspectType(fc.Args["name"].(string))
		},
		nil,
		ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query___type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query___type_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query___schema,
		func(ctx context.Context) (any, error) {
			return ec.introspectSchema()
		},
		nil,
		ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query___schema(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "description":
				return ec.fieldContext___Schema_description(ctx, field)
			case "types":
				return ec.fieldContext___Schema_types(ctx, field)
			case "queryType":
				return ec.fieldContext___Schema_queryType(ctx, field)
			case "mutationType":
				return ec.fieldContext___Schema_mutationType(ctx, field)
			case "subscriptionType":
				return ec.fieldContext___Schema_subscriptionType(ctx, field)
			case "directives":
				return ec.fieldContext___Schema_directives(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Schema", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _RiskEvent_id(ctx context.Context, field graphql.CollectedField, obj *models.RiskEvent) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_RiskEvent_id,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.RiskEvent().ID(ctx, obj)
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_RiskEvent_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RiskEvent",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RiskEvent_vehicleId(ctx context.Context, field graphql.CollectedField, obj *models.RiskEvent) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_RiskEvent_vehicleId,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.RiskEvent().VehicleID(ctx, obj)
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_RiskEvent_vehicleId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RiskEvent",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RiskEvent_vehicle(ctx context.Context, field graphql.CollectedField, obj *models.RiskEvent) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_RiskEvent_vehicle,
		func(ctx context.Context) (any, error) {
			return obj.Vehicle, nil
		},
		nil,
		ec.marshalNVehicle2githubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋpkgᚋmodelsᚐVehicle,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_RiskEvent_vehicle(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RiskEvent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Vehicle_id(ctx, field)
			case "vin":
				return ec.fieldContext_Vehicle_vin(ctx, field)
			case "make":
				return ec.fieldContext_Vehicle_make(ctx, field)
			case "model":
				return ec.fieldContext_Vehicle_model(ctx, field)
			case "year":
				return ec.fieldContext_Vehicle_year(ctx, field)
			case "licensePlate":
				return ec.fieldContext_Vehicle_licensePlate(ctx, field)
			case "fleetId":
				return ec.fieldContext_Vehicle_fleetId(ctx, field)
			case "fleet":
				return ec.fieldContext_Vehicle_fleet(ctx, field)
			case "driverId":
				return ec.fieldContext_Vehicle_driverId(ctx, field)
			case "driver":
				return ec.fieldContext_Vehicle_driver(ctx, field)
			case "status":
				return ec.fieldContext_Vehicle_status(ctx, field)
			case "currentLocation":
				return ec.fieldContext_Vehicle_currentLocation(ctx, field)
			case "lastTelemetry":
				return ec.fieldContext_Vehicle_lastTelemetry(ctx, field)
			case "riskScore":
				return ec.fieldContext_Vehicle_riskScore(ctx, field)
			case "createdAt":
				return ec.fieldContext_Vehicle_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Vehicle_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Vehicle", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _RiskEvent_driverId(ctx context.Context, field graphql.CollectedField, obj *models.RiskEvent) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_RiskEvent_driverId,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.RiskEvent().DriverID(ctx, obj)
		},
		nil,
		ec.marshalOID2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_RiskEvent_driverId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RiskEvent",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RiskEvent_driver(ctx context.Context, field graphql.CollectedField, obj *models.RiskEvent) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_RiskEvent_driver,
		func(ctx context.Context) (any, error) {
			return obj.Driver, nil
		},
		nil,
		ec.marshalODriver2ᚖgithubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋpkgᚋmodelsᚐDriver,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_RiskEvent_driver(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RiskEvent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Driver_id(ctx, field)
			case "employeeId":
				return ec.fieldContext_Driver_employeeId(ctx, field)
			case "firstName":
				return ec.fieldContext_Driver_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_Driver_lastName(ctx, field)
			case "email":
				return ec.fieldContext_Driver_email(ctx, field)
			case "phone":
				return ec.fieldContext_Driver_phone(ctx, field)
			case "licenseNumber":
				return ec.fieldContext_Driver_licenseNumber(ctx, field)
			case "fleetId":
				return ec.fieldContext_Driver_fleetId(ctx, field)
			case "fleet":
				return ec.fieldContext_Driver_fleet(ctx, field)
			case "status":
				return ec.fieldContext_Driver_status(ctx, field)
			case "riskScore":
				return ec.fieldContext_Driver_riskScore(ctx, field)
			case "currentVehicle":
				return ec.fieldContext_Driver_currentVehicle(ctx, field)
			case "driverScore":
				return ec.fieldContext_Driver_driverScore(ctx, field)
			case "createdAt":
				return ec.fieldContext_Driver_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Driver_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Driver", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _RiskEvent_eventType(ctx context.Context, field graphql.CollectedField, obj *models.RiskEvent) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_RiskEvent_eventType,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.RiskEvent().EventType(ctx, obj)
		},
		nil,
		ec.marshalNRiskEventType2githubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋservicesᚋapiᚋgraphᚋmodelᚐRiskEventType,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_RiskEvent_eventType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RiskEvent",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type RiskEventType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RiskEvent_severity(ctx context.Context, field graphql.CollectedField, obj *models.RiskEvent) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_RiskEvent_severity,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.RiskEvent().Severity(ctx, obj)
		},
		nil,
		ec.marshalNRiskSeverity2githubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋservicesᚋapiᚋgraphᚋmodelᚐRiskSeverity,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_RiskEvent_severity(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RiskEvent",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type RiskSeverity does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RiskEvent_riskScore(ctx context.Context, field graphql.CollectedField, obj *models.RiskEvent) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_RiskEvent_riskScore,
		func(ctx context.Context) (any, error) {
			return obj.RiskScore, nil
		},
		nil,
		ec.marshalNFloat2float64,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_RiskEvent_riskScore(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RiskEvent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RiskEvent_timestamp(ctx context.Context, field graphql.CollectedField, obj *models.RiskEvent) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_RiskEvent_timestamp,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.RiskEvent().Timestamp(ctx, obj)
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_RiskEvent_timestamp(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RiskEvent",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RiskEvent_latitude(ctx context.Context, field graphql.CollectedField, obj *models.RiskEvent) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_RiskEvent_latitude,
		func(ctx context.Context) (any, error) {
			return obj.Latitude, nil
		},
		nil,
		ec.marshalOFloat2ᚖfloat64,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_RiskEvent_latitude(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RiskEvent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RiskEvent_longitude(ctx context.Context, field graphql.CollectedField, obj *models.RiskEvent) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_RiskEvent_longitude,
		func(ctx context.Context) (any, error) {
			return obj.Longitude, nil
		},
		nil,
		ec.marshalOFloat2ᚖfloat64,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_RiskEvent_longitude(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RiskEvent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RiskEvent_description(ctx context.Context, field graphql.CollectedField, obj *models.RiskEvent) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_RiskEvent_description,
		func(ctx context.Context) (any, error) {
			return obj.Description, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_RiskEvent_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RiskEvent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RiskEvent_data(ctx context.Context, field graphql.CollectedField, obj *models.RiskEvent) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_RiskEvent_data,
		func(ctx context.Context) (any, error) {
			return obj.Data, nil
		},
		nil,
		ec.marshalOString2string,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_RiskEvent_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RiskEvent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RiskEvent_status(ctx context.Context, field graphql.CollectedField, obj *models.RiskEvent) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_RiskEvent_status,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.RiskEvent().Status(ctx, obj)
		},
		nil,
		ec.marshalNRiskEventStatus2githubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋservicesᚋapiᚋgraphᚋmodelᚐRiskEventStatus,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_RiskEvent_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RiskEvent",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type RiskEventStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RiskEvent_createdAt(ctx context.Context, field graphql.CollectedField, obj *models.RiskEvent) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_RiskEvent_createdAt,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.RiskEvent().CreatedAt(ctx, obj)
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_RiskEvent_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RiskEvent",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RiskEvent_updatedAt(ctx context.Context, field graphql.CollectedField, obj *models.RiskEvent) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_RiskEvent_updatedAt,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.RiskEvent().UpdatedAt(ctx, obj)
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_RiskEvent_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RiskEvent",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Subscription_vehicleUpdates(ctx context.Context, field graphql.CollectedField) (ret func(ctx context.Context) graphql.Marshaler) {
	return graphql.ResolveFieldStream(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Subscription_vehicleUpdates,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Subscription().VehicleUpdates(ctx, fc.Args["vehicleId"].(string))
		},
		nil,
		ec.marshalNVehicleData2ᚖgithubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋservicesᚋapiᚋgraphᚋmodelᚐVehicleData,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Subscription_vehicleUpdates(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "vehicle":
				return ec.fieldContext_VehicleData_vehicle(ctx, field)
			case "location":
				return ec.fieldContext_VehicleData_location(ctx, field)
			case "speed":
				return ec.fieldContext_VehicleData_speed(ctx, field)
			case "heading":
				return ec.fieldContext_VehicleData_heading(ctx, field)
			case "engineStatus":
				return ec.fieldContext_VehicleData_engineStatus(ctx, field)
			case "fuelLevel":
				return ec.fieldContext_VehicleData_fuelLevel(ctx, field)
			case "lastUpdate":
				return ec.fieldContext_VehicleData_lastUpdate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type VehicleData", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Subscription_vehicleUpdates_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Subscription_riskEventNotifications(ctx context.Context, field graphql.CollectedField) (ret func(ctx context.Context) graphql.Marshaler) {
	return graphql.ResolveFieldStream(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Subscription_riskEventNotifications,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Subscription().RiskEventNotifications(ctx, fc.Args["fleetId"].(string))
		},
		nil,
		ec.marshalNRiskEvent2ᚖgithubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋpkgᚋmodelsᚐRiskEvent,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Subscription_riskEventNotifications(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_RiskEvent_id(ctx, field)
			case "vehicleId":
				return ec.fieldContext_RiskEvent_vehicleId(ctx, field)
			case "vehicle":
				return ec.fieldContext_RiskEvent_vehicle(ctx, field)
			case "driverId":
				return ec.fieldContext_RiskEvent_driverId(ctx, field)
			case "driver":
				return ec.fieldContext_RiskEvent_driver(ctx, field)
			case "eventType":
				return ec.fieldContext_RiskEvent_eventType(ctx, field)
			case "severity":
				return ec.fieldContext_RiskEvent_severity(ctx, field)
			case "riskScore":
				return ec.fieldContext_RiskEvent_riskScore(ctx, field)
			case "timestamp":
				return ec.fieldContext_RiskEvent_timestamp(ctx, field)
			case "latitude":
				return ec.fieldContext_RiskEvent_latitude(ctx, field)
			case "longitude":
				return ec.fieldContext_RiskEvent_longitude(ctx, field)
			case "description":
				return ec.fieldContext_RiskEvent_description(ctx, field)
			case "data":
				return ec.fieldContext_RiskEvent_data(ctx, field)
			case "status":
				return ec.fieldContext_RiskEvent_status(ctx, field)
			case "createdAt":
				return ec.fieldContext_RiskEvent_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_RiskEvent_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RiskEvent", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Subscription_riskEventNotifications_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Subscription_alertNotifications(ctx context.Context, field graphql.CollectedField) (ret func(ctx context.Context) graphql.Marshaler) {
	return graphql.ResolveFieldStream(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Subscription_alertNotifications,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Subscription().AlertNotifications(ctx, fc.Args["fleetId"].(string))
		},
		nil,
		ec.marshalNAlert2ᚖgithubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋpkgᚋmodelsᚐAlert,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Subscription_alertNotifications(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Alert_id(ctx, field)
			case "fleetId":
				return ec.fieldContext_Alert_fleetId(ctx, field)
			case "fleet":
				return ec.fieldContext_Alert_fleet(ctx, field)
			case "vehicleId":
				return ec.fieldContext_Alert_vehicleId(ctx, field)
			case "vehicle":
				return ec.fieldContext_Alert_vehicle(ctx, field)
			case "driverId":
				return ec.fieldContext_Alert_driverId(ctx, field)
			case "driver":
				return ec.fieldContext_Alert_driver(ctx, field)
			case "riskEventId":
				return ec.fieldContext_Alert_riskEventId(ctx, field)
			case "riskEvent":
				return ec.fieldContext_Alert_riskEvent(ctx, field)
			case "type":
				return ec.fieldContext_Alert_type(ctx, field)
			case "priority":
				return ec.fieldContext_Alert_priority(ctx, field)
			case "title":
				return ec.fieldContext_Alert_title(ctx, field)
			case "message":
				return ec.fieldContext_Alert_message(ctx, field)
			case "status":
				return ec.fieldContext_Alert_status(ctx, field)
			case "createdAt":
				return ec.fieldContext_Alert_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Alert_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Alert", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Subscription_alertNotifications_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _TelemetryEvent_id(ctx context.Context, field graphql.CollectedField, obj *models.TelemetryEvent) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TelemetryEvent_id,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.TelemetryEvent().ID(ctx, obj)
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TelemetryEvent_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TelemetryEvent",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TelemetryEvent_vehicleId(ctx context.Context, field graphql.CollectedField, obj *models.TelemetryEvent) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TelemetryEvent_vehicleId,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.TelemetryEvent().VehicleID(ctx, obj)
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TelemetryEvent_vehicleId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TelemetryEvent",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TelemetryEvent_vehicle(ctx context.Context, field graphql.CollectedField, obj *models.TelemetryEvent) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TelemetryEvent_vehicle,
		func(ctx context.Context) (any, error) {
			return obj.Vehicle, nil
		},
		nil,
		ec.marshalNVehicle2githubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋpkgᚋmodelsᚐVehicle,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TelemetryEvent_vehicle(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TelemetryEvent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Vehicle_id(ctx, field)
			case "vin":
				return ec.fieldContext_Vehicle_vin(ctx, field)
			case "make":
				return ec.fieldContext_Vehicle_make(ctx, field)
			case "model":
				return ec.fieldContext_Vehicle_model(ctx, field)
			case "year":
				return ec.fieldContext_Vehicle_year(ctx, field)
			case "licensePlate":
				return ec.fieldContext_Vehicle_licensePlate(ctx, field)
			case "fleetId":
				return ec.fieldContext_Vehicle_fleetId(ctx, field)
			case "fleet":
				return ec.fieldContext_Vehicle_fleet(ctx, field)
			case "driverId":
				return ec.fieldContext_Vehicle_driverId(ctx, field)
			case "driver":
				return ec.fieldContext_Vehicle_driver(ctx, field)
			case "status":
				return ec.fieldContext_Vehicle_status(ctx, field)
			case "currentLocation":
				return ec.fieldContext_Vehicle_currentLocation(ctx, field)
			case "lastTelemetry":
				return ec.fieldContext_Vehicle_lastTelemetry(ctx, field)
			case "riskScore":
				return ec.fieldContext_Vehicle_riskScore(ctx, field)
			case "createdAt":
				return ec.fieldContext_Vehicle_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Vehicle_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Vehicle", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TelemetryEvent_eventType(ctx context.Context, field graphql.CollectedField, obj *models.TelemetryEvent) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TelemetryEvent_eventType,
		func(ctx context.Context) (any, error) {
			return obj.EventType, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TelemetryEvent_eventType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TelemetryEvent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TelemetryEvent_timestamp(ctx context.Context, field graphql.CollectedField, obj *models.TelemetryEvent) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TelemetryEvent_timestamp,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.TelemetryEvent().Timestamp(ctx, obj)
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TelemetryEvent_timestamp(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TelemetryEvent",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TelemetryEvent_latitude(ctx context.Context, field graphql.CollectedField, obj *models.TelemetryEvent) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TelemetryEvent_latitude,
		func(ctx context.Context) (any, error) {
			return obj.Latitude, nil
		},
		nil,
		ec.marshalOFloat2ᚖfloat64,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_TelemetryEvent_latitude(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TelemetryEvent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TelemetryEvent_longitude(ctx context.Context, field graphql.CollectedField, obj *models.TelemetryEvent) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TelemetryEvent_longitude,
		func(ctx context.Context) (any, error) {
			return obj.Longitude, nil
		},
		nil,
		ec.marshalOFloat2ᚖfloat64,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_TelemetryEvent_longitude(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TelemetryEvent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TelemetryEvent_speed(ctx context.Context, field graphql.CollectedField, obj *models.TelemetryEvent) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TelemetryEvent_speed,
		func(ctx context.Context) (any, error) {
			return obj.Speed, nil
		},
		nil,
		ec.marshalOFloat2ᚖfloat64,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_TelemetryEvent_speed(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TelemetryEvent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TelemetryEvent_acceleration(ctx context.Context, field graphql.CollectedField, obj *models.TelemetryEvent) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TelemetryEvent_acceleration,
		func(ctx context.Context) (any, error) {
			return obj.Acceleration, nil
		},
		nil,
		ec.marshalOFloat2ᚖfloat64,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_TelemetryEvent_acceleration(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TelemetryEvent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TelemetryEvent_data(ctx context.Context, field graphql.CollectedField, obj *models.TelemetryEvent) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TelemetryEvent_data,
		func(ctx context.Context) (any, error) {
			return obj.Data, nil
		},
		nil,
		ec.marshalOString2string,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_TelemetryEvent_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TelemetryEvent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TelemetryEvent_processedAt(ctx context.Context, field graphql.CollectedField, obj *models.TelemetryEvent) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TelemetryEvent_processedAt,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.TelemetryEvent().ProcessedAt(ctx, obj)
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_TelemetryEvent_processedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TelemetryEvent",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TelemetryEvent_createdAt(ctx context.Context, field graphql.CollectedField, obj *models.TelemetryEvent) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TelemetryEvent_createdAt,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.TelemetryEvent().CreatedAt(ctx, obj)
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TelemetryEvent_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TelemetryEvent",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Vehicle_id(ctx context.Context, field graphql.CollectedField, obj *models.Vehicle) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Vehicle_id,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Vehicle().ID(ctx, obj)
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Vehicle_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Vehicle",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Vehicle_vin(ctx context.Context, field graphql.CollectedField, obj *models.Vehicle) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Vehicle_vin,
		func(ctx context.Context) (any, error) {
			return obj.VIN, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Vehicle_vin(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Vehicle",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Vehicle_make(ctx context.Context, field graphql.CollectedField, obj *models.Vehicle) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Vehicle_make,
		func(ctx context.Context) (any, error) {
			return obj.Make, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Vehicle_make(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Vehicle",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Vehicle_model(ctx context.Context, field graphql.CollectedField, obj *models.Vehicle) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Vehicle_model,
		func(ctx context.Context) (any, error) {
			return obj.Model, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Vehicle_model(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Vehicle",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Vehicle_year(ctx context.Context, field graphql.CollectedField, obj *models.Vehicle) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Vehicle_year,
		func(ctx context.Context) (any, error) {
			return obj.Year, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Vehicle_year(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Vehicle",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Vehicle_licensePlate(ctx context.Context, field graphql.CollectedField, obj *models.Vehicle) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Vehicle_licensePlate,
		func(ctx context.Context) (any, error) {
			return obj.LicensePlate, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Vehicle_licensePlate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Vehicle",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Vehicle_fleetId(ctx context.Context, field graphql.CollectedField, obj *models.Vehicle) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Vehicle_fleetId,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Vehicle().FleetID(ctx, obj)
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Vehicle_fleetId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Vehicle",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Vehicle_fleet(ctx context.Context, field graphql.CollectedField, obj *models.Vehicle) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Vehicle_fleet,
		func(ctx context.Context) (any, error) {
			return obj.Fleet, nil
		},
		nil,
		ec.marshalNFleet2githubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋpkgᚋmodelsᚐFleet,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Vehicle_fleet(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Vehicle",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Fleet_id(ctx, field)
			case "name":
				return ec.fieldContext_Fleet_name(ctx, field)
			case "companyName":
				return ec.fieldContext_Fleet_companyName(ctx, field)
			case "contactEmail":
				return ec.fieldContext_Fleet_contactEmail(ctx, field)
			case "status":
				return ec.fieldContext_Fleet_status(ctx, field)
			case "vehicles":
				return ec.fieldContext_Fleet_vehicles(ctx, field)
			case "drivers":
				return ec.fieldContext_Fleet_drivers(ctx, field)
			case "createdAt":
				return ec.fieldContext_Fleet_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Fleet_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Fleet", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Vehicle_driverId(ctx context.Context, field graphql.CollectedField, obj *models.Vehicle) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Vehicle_driverId,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Vehicle().DriverID(ctx, obj)
		},
		nil,
		ec.marshalOID2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Vehicle_driverId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Vehicle",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Vehicle_driver(ctx context.Context, field graphql.CollectedField, obj *models.Vehicle) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Vehicle_driver,
		func(ctx context.Context) (any, error) {
			return obj.Driver, nil
		},
		nil,
		ec.marshalODriver2ᚖgithubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋpkgᚋmodelsᚐDriver,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Vehicle_driver(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Vehicle",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Driver_id(ctx, field)
			case "employeeId":
				return ec.fieldContext_Driver_employeeId(ctx, field)
			case "firstName":
				return ec.fieldContext_Driver_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_Driver_lastName(ctx, field)
			case "email":
				return ec.fieldContext_Driver_email(ctx, field)
			case "phone":
				return ec.fieldContext_Driver_phone(ctx, field)
			case "licenseNumber":
				return ec.fieldContext_Driver_licenseNumber(ctx, field)
			case "fleetId":
				return ec.fieldContext_Driver_fleetId(ctx, field)
			case "fleet":
				return ec.fieldContext_Driver_fleet(ctx, field)
			case "status":
				return ec.fieldContext_Driver_status(ctx, field)
			case "riskScore":
				return ec.fieldContext_Driver_riskScore(ctx, field)
			case "currentVehicle":
				return ec.fieldContext_Driver_currentVehicle(ctx, field)
			case "driverScore":
				return ec.fieldContext_Driver_driverScore(ctx, field)
			case "createdAt":
				return ec.fieldContext_Driver_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Driver_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Driver", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Vehicle_status(ctx context.Context, field graphql.CollectedField, obj *models.Vehicle) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Vehicle_status,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Vehicle().Status(ctx, obj)
		},
		nil,
		ec.marshalNVehicleStatus2githubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋservicesᚋapiᚋgraphᚋmodelᚐVehicleStatus,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Vehicle_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Vehicle",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type VehicleStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Vehicle_currentLocation(ctx context.Context, field graphql.CollectedField, obj *models.Vehicle) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Vehicle_currentLocation,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Vehicle().CurrentLocation(ctx, obj)
		},
		nil,
		ec.marshalOLocation2ᚖgithubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋservicesᚋapiᚋgraphᚋmodelᚐLocation,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Vehicle_currentLocation(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Vehicle",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "latitude":
				return ec.fieldContext_Location_latitude(ctx, field)
			case "longitude":
				return ec.fieldContext_Location_longitude(ctx, field)
			case "address":
				return ec.fieldContext_Location_address(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Location", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Vehicle_lastTelemetry(ctx context.Context, field graphql.CollectedField, obj *models.Vehicle) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Vehicle_lastTelemetry,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Vehicle().LastTelemetry(ctx, obj)
		},
		nil,
		ec.marshalOTelemetryEvent2ᚖgithubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋpkgᚋmodelsᚐTelemetryEvent,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Vehicle_lastTelemetry(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Vehicle",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TelemetryEvent_id(ctx, field)
			case "vehicleId":
				return ec.fieldContext_TelemetryEvent_vehicleId(ctx, field)
			case "vehicle":
				return ec.fieldContext_TelemetryEvent_vehicle(ctx, field)
			case "eventType":
				return ec.fieldContext_TelemetryEvent_eventType(ctx, field)
			case "timestamp":
				return ec.fieldContext_TelemetryEvent_timestamp(ctx, field)
			case "latitude":
				return ec.fieldContext_TelemetryEvent_latitude(ctx, field)
			case "longitude":
				return ec.fieldContext_TelemetryEvent_longitude(ctx, field)
			case "speed":
				return ec.fieldContext_TelemetryEvent_speed(ctx, field)
			case "acceleration":
				return ec.fieldContext_TelemetryEvent_acceleration(ctx, field)
			case "data":
				return ec.fieldContext_TelemetryEvent_data(ctx, field)
			case "processedAt":
				return ec.fieldContext_TelemetryEvent_processedAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_TelemetryEvent_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TelemetryEvent", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Vehicle_riskScore(ctx context.Context, field graphql.CollectedField, obj *models.Vehicle) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Vehicle_riskScore,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Vehicle().RiskScore(ctx, obj)
		},
		nil,
		ec.marshalNFloat2float64,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Vehicle_riskScore(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Vehicle",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Vehicle_createdAt(ctx context.Context, field graphql.CollectedField, obj *models.Vehicle) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Vehicle_createdAt,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Vehicle().CreatedAt(ctx, obj)
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Vehicle_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Vehicle",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Vehicle_updatedAt(ctx context.Context, field graphql.CollectedField, obj *models.Vehicle) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Vehicle_updatedAt,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Vehicle().UpdatedAt(ctx, obj)
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Vehicle_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Vehicle",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VehicleData_vehicle(ctx context.Context, field graphql.CollectedField, obj *model.VehicleData) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_VehicleData_vehicle,
		func(ctx context.Context) (any, error) {
			return obj.Vehicle, nil
		},
		nil,
		ec.marshalNVehicle2ᚖgithubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋpkgᚋmodelsᚐVehicle,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_VehicleData_vehicle(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VehicleData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Vehicle_id(ctx, field)
			case "vin":
				return ec.fieldContext_Vehicle_vin(ctx, field)
			case "make":
				return ec.fieldContext_Vehicle_make(ctx, field)
			case "model":
				return ec.fieldContext_Vehicle_model(ctx, field)
			case "year":
				return ec.fieldContext_Vehicle_year(ctx, field)
			case "licensePlate":
				return ec.fieldContext_Vehicle_licensePlate(ctx, field)
			case "fleetId":
				return ec.fieldContext_Vehicle_fleetId(ctx, field)
			case "fleet":
				return ec.fieldContext_Vehicle_fleet(ctx, field)
			case "driverId":
				return ec.fieldContext_Vehicle_driverId(ctx, field)
			case "driver":
				return ec.fieldContext_Vehicle_driver(ctx, field)
			case "status":
				return ec.fieldContext_Vehicle_status(ctx, field)
			case "currentLocation":
				return ec.fieldContext_Vehicle_currentLocation(ctx, field)
			case "lastTelemetry":
				return ec.fieldContext_Vehicle_lastTelemetry(ctx, field)
			case "riskScore":
				return ec.fieldContext_Vehicle_riskScore(ctx, field)
			case "createdAt":
				return ec.fieldContext_Vehicle_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Vehicle_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Vehicle", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _VehicleData_location(ctx context.Context, field graphql.CollectedField, obj *model.VehicleData) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_VehicleData_location,
		func(ctx context.Context) (any, error) {
			return obj.Location, nil
		},
		nil,
		ec.marshalOLocation2ᚖgithubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋservicesᚋapiᚋgraphᚋmodelᚐLocation,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_VehicleData_location(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VehicleData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "latitude":
				return ec.fieldContext_Location_latitude(ctx, field)
			case "longitude":
				return ec.fieldContext_Location_longitude(ctx, field)
			case "address":
				return ec.fieldContext_Location_address(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Location", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _VehicleData_speed(ctx context.Context, field graphql.CollectedField, obj *model.VehicleData) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_VehicleData_speed,
		func(ctx context.Context) (any, error) {
			return obj.Speed, nil
		},
		nil,
		ec.marshalOFloat2ᚖfloat64,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_VehicleData_speed(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VehicleData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VehicleData_heading(ctx context.Context, field graphql.CollectedField, obj *model.VehicleData) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_VehicleData_heading,
		func(ctx context.Context) (any, error) {
			return obj.Heading, nil
		},
		nil,
		ec.marshalOFloat2ᚖfloat64,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_VehicleData_heading(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VehicleData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VehicleData_engineStatus(ctx context.Context, field graphql.CollectedField, obj *model.VehicleData) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_VehicleData_engineStatus,
		func(ctx context.Context) (any, error) {
			return obj.EngineStatus, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_VehicleData_engineStatus(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VehicleData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VehicleData_fuelLevel(ctx context.Context, field graphql.CollectedField, obj *model.VehicleData) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_VehicleData_fuelLevel,
		func(ctx context.Context) (any, error) {
			return obj.FuelLevel, nil
		},
		nil,
		ec.marshalOFloat2ᚖfloat64,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_VehicleData_fuelLevel(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VehicleData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VehicleData_lastUpdate(ctx context.Context, field graphql.CollectedField, obj *model.VehicleData) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_VehicleData_lastUpdate,
		func(ctx context.Context) (any, error) {
			return obj.LastUpdate, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_VehicleData_lastUpdate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VehicleData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Directive_name,
		func(ctx context.Context) (any, error) {
			return obj.Name, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___Directive_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Directive_description,
		func(ctx context.Context) (any, error) {
			return obj.Description(), nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Directive_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Directive_isRepeatable,
		func(ctx context.Context) (any, error) {
			return obj.IsRepeatable, nil
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___Directive_isRepeatable(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Directive_locations,
		func(ctx context.Context) (any, error) {
			return obj.Locations, nil
		},
		nil,
		ec.marshalN__DirectiveLocation2ᚕstringᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___Directive_locations(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __DirectiveLocation does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Directive_args,
		func(ctx context.Context) (any, error) {
			return obj.Args, nil
		},
		nil,
		ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___Directive_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___InputValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___InputValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Directive_args_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___EnumValue_name,
		func(ctx context.Context) (any, error) {
			return obj.Name, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___EnumValue_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___EnumValue_description,
		func(ctx context.Context) (any, error) {
			return obj.Description(), nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___EnumValue_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___EnumValue_isDeprecated,
		func(ctx context.Context) (any, error) {
			return obj.IsDeprecated(), nil
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___EnumValue_isDeprecated(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___EnumValue_deprecationReason,
		func(ctx context.Context) (any, error) {
			return obj.DeprecationReason(), nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___EnumValue_deprecationReason(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Field_name,
		func(ctx context.Context) (any, error) {
			return obj.Name, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___Field_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Field_description,
		func(ctx context.Context) (any, error) {
			return obj.Description(), nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Field_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Field_args,
		func(ctx context.Context) (any, error) {
			return obj.Args, nil
		},
		nil,
		ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___Field_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___InputValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___InputValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Field_args_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Field_type,
		func(ctx context.Context) (any, error) {
			return obj.Type, nil
		},
		nil,
		ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___Field_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Field_isDeprecated,
		func(ctx context.Context) (any, error) {
			return obj.IsDeprecated(), nil
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___Field_isDeprecated(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Field_deprecationReason,
		func(ctx context.Context) (any, error) {
			return obj.DeprecationReason(), nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Field_deprecationReason(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___InputValue_name,
		func(ctx context.Context) (any, error) {
			return obj.Name, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___InputValue_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___InputValue_description,
		func(ctx context.Context) (any, error) {
			return obj.Description(), nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___InputValue_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___InputValue_type,
		func(ctx context.Context) (any, error) {
			return obj.Type, nil
		},
		nil,
		ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___InputValue_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___InputValue_defaultValue,
		func(ctx context.Context) (any, error) {
			return obj.DefaultValue, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___InputValue_defaultValue(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___InputValue_isDeprecated,
		func(ctx context.Context) (any, error) {
			return obj.IsDeprecated(), nil
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___InputValue_isDeprecated(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___InputValue_deprecationReason,
		func(ctx context.Context) (any, error) {
			return obj.DeprecationReason(), nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___InputValue_deprecationReason(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Schema_description,
		func(ctx context.Context) (any, error) {
			return obj.Description(), nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Schema_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Schema_types,
		func(ctx context.Context) (any, error) {
			return obj.Types(), nil
		},
		nil,
		ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___Schema_types(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Schema_queryType,
		func(ctx context.Context) (any, error) {
			return obj.QueryType(), nil
		},
		nil,
		ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___Schema_queryType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Schema_mutationType,
		func(ctx context.Context) (any, error) {
			return obj.MutationType(), nil
		},
		nil,
		ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Schema_mutationType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Schema_subscriptionType,
		func(ctx context.Context) (any, error) {
			return obj.SubscriptionType(), nil
		},
		nil,
		ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Schema_subscriptionType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Schema_directives,
		func(ctx context.Context) (any, error) {
			return obj.Directives(), nil
		},
		nil,
		ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___Schema_directives(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Directive_name(ctx, field)
			case "description":
				return ec.fieldContext___Directive_description(ctx, field)
			case "isRepeatable":
				return ec.fieldContext___Directive_isRepeatable(ctx, field)
			case "locations":
				return ec.fieldContext___Directive_locations(ctx, field)
			case "args":
				return ec.fieldContext___Directive_args(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Directive", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Type_kind,
		func(ctx context.Context) (any, error) {
			return obj.Kind(), nil
		},
		nil,
		ec.marshalN__TypeKind2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___Type_kind(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __TypeKind does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Type_name,
		func(ctx context.Context) (any, error) {
			return obj.Name(), nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Type_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Type_description,
		func(ctx context.Context) (any, error) {
			return obj.Description(), nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Type_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Type_specifiedByURL,
		func(ctx context.Context) (any, error) {
			return obj.SpecifiedByURL(), nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Type_specifiedByURL(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Type_fields,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return obj.Fields(fc.Args["includeDeprecated"].(bool)), nil
		},
		nil,
		ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Type_fields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Field_name(ctx, field)
			case "description":
				return ec.fieldContext___Field_description(ctx, field)
			case "args":
				return ec.fieldContext___Field_args(ctx, field)
			case "type":
				return ec.fieldContext___Field_type(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___Field_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___Field_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Field", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_fields_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Type_interfaces,
		func(ctx context.Context) (any, error) {
			return obj.Interfaces(), nil
		},
		nil,
		ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Type_interfaces(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Type_possibleTypes,
		func(ctx context.Context) (any, error) {
			return obj.PossibleTypes(), nil
		},
		nil,
		ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Type_possibleTypes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Type_enumValues,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return obj.EnumValues(fc.Args["includeDeprecated"].(bool)), nil
		},
		nil,
		ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Type_enumValues(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___EnumValue_name(ctx, field)
			case "description":
				return ec.fieldContext___EnumValue_description(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___EnumValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___EnumValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __EnumValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_enumValues_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Type_inputFields,
		func(ctx context.Context) (any, error) {
			return obj.InputFields(), nil
		},
		nil,
		ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Type_inputFields(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___InputValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___InputValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Type_ofType,
		func(ctx context.Context) (any, error) {
			return obj.OfType(), nil
		},
		nil,
		ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Type_ofType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_isOneOf(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Type_isOneOf,
		func(ctx context.Context) (any, error) {
			return obj.IsOneOf(), nil
		},
		nil,
		ec.marshalOBoolean2bool,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Type_isOneOf(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputCreateDriverInput(ctx context.Context, obj any) (model.CreateDriverInput, error) {
	var it model.CreateDriverInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"employeeId", "firstName", "lastName", "email", "phone", "licenseNumber", "fleetId"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "employeeId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("employeeId"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmployeeID = data
		case "firstName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstName"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.FirstName = data
		case "lastName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastName"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastName = data
		case "email":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Email = data
		case "phone":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Phone = data
		case "licenseNumber":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("licenseNumber"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.LicenseNumber = data
		case "fleetId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fleetId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.FleetID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateFleetInput(ctx context.Context, obj any) (model.CreateFleetInput, error) {
	var it model.CreateFleetInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "companyName", "contactEmail"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "companyName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyName"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyName = data
		case "contactEmail":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactEmail"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactEmail = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateVehicleInput(ctx context.Context, obj any) (model.CreateVehicleInput, error) {
	var it model.CreateVehicleInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"vin", "make", "model", "year", "licensePlate", "fleetId"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "vin":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vin"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Vin = data
		case "make":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("make"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Make = data
		case "model":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("model"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Model = data
		case "year":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("year"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.Year = data
		case "licensePlate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("licensePlate"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.LicensePlate = data
		case "fleetId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fleetId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.FleetID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateDriverInput(ctx context.Context, obj any) (model.UpdateDriverInput, error) {
	var it model.UpdateDriverInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"firstName", "lastName", "email", "phone", "licenseNumber", "status"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "firstName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstName"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FirstName = data
		case "lastName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastName"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastName = data
		case "email":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Email = data
		case "phone":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Phone = data
		case "licenseNumber":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("licenseNumber"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LicenseNumber = data
		case "status":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			data, err := ec.unmarshalODriverStatus2ᚖgithubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋservicesᚋapiᚋgraphᚋmodelᚐDriverStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.Status = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateFleetInput(ctx context.Context, obj any) (model.UpdateFleetInput, error) {
	var it model.UpdateFleetInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "companyName", "contactEmail", "status"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "companyName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyName"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyName = data
		case "contactEmail":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactEmail"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactEmail = data
		case "status":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Status = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateVehicleInput(ctx context.Context, obj any) (model.UpdateVehicleInput, error) {
	var it model.UpdateVehicleInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"make", "model", "year", "licensePlate", "status"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "make":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("make"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Make = data
		case "model":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("model"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Model = data
		case "year":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("year"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.Year = data
		case "licensePlate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("licensePlate"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LicensePlate = data
		case "status":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			data, err := ec.unmarshalOVehicleStatus2ᚖgithubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋservicesᚋapiᚋgraphᚋmodelᚐVehicleStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.Status = data
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var alertImplementors = []string{"Alert"}

func (ec *executionContext) _Alert(ctx context.Context, sel ast.SelectionSet, obj *models.Alert) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, alertImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Alert")
		case "id":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Alert_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "fleetId":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Alert_fleetId(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "fleet":
			out.Values[i] = ec._Alert_fleet(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "vehicleId":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Alert_vehicleId(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "vehicle":
			out.Values[i] = ec._Alert_vehicle(ctx, field, obj)
		case "driverId":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Alert_driverId(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "driver":
			out.Values[i] = ec._Alert_driver(ctx, field, obj)
		case "riskEventId":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Alert_riskEventId(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "riskEvent":
			out.Values[i] = ec._Alert_riskEvent(ctx, field, obj)
		case "type":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Alert_type(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "priority":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Alert_priority(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "title":
			out.Values[i] = ec._Alert_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "message":
			out.Values[i] = ec._Alert_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "status":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Alert_status(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "createdAt":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Alert_createdAt(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "updatedAt":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Alert_updatedAt(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var driverImplementors = []string{"Driver"}

func (ec *executionContext) _Driver(ctx context.Context, sel ast.SelectionSet, obj *models.Driver) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Driver")
		case "id":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Driver_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "employeeId":
			out.Values[i] = ec._Driver_employeeId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "firstName":
			out.Values[i] = ec._Driver_firstName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "lastName":
			out.Values[i] = ec._Driver_lastName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "email":
			out.Values[i] = ec._Driver_email(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "phone":
			out.Values[i] = ec._Driver_phone(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "licenseNumber":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Driver_licenseNumber(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "fleetId":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Driver_fleetId(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "fleet":
			out.Values[i] = ec._Driver_fleet(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "status":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Driver_status(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "riskScore":
			out.Values[i] = ec._Driver_riskScore(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "currentVehicle":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Driver_currentVehicle(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "driverScore":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Driver_driverScore(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "createdAt":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Driver_createdAt(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "updatedAt":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Driver_updatedAt(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var driverScoreImplementors = []string{"DriverScore"}

func (ec *executionContext) _DriverScore(ctx context.Context, sel ast.SelectionSet, obj *models.DriverScore) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverScoreImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverScore")
		case "id":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._DriverScore_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "driverId":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._DriverScore_driverId(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "driver":
			out.Values[i] = ec._DriverScore_driver(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "overallScore":
			out.Values[i] = ec._DriverScore_overallScore(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "safetyScore":
			out.Values[i] = ec._DriverScore_safetyScore(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "efficiencyScore":
			out.Values[i] = ec._DriverScore_efficiencyScore(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "totalMiles":
			out.Values[i] = ec._DriverScore_totalMiles(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "totalTrips":
			out.Values[i] = ec._DriverScore_totalTrips(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "riskEvents":
			out.Values[i] = ec._DriverScore_riskEvents(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "lastUpdated":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._DriverScore_lastUpdated(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "createdAt":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._DriverScore_createdAt(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "updatedAt":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._DriverScore_updatedAt(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var fleetImplementors = []string{"Fleet"}

func (ec *executionContext) _Fleet(ctx context.Context, sel ast.SelectionSet, obj *models.Fleet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fleetImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Fleet")
		case "id":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Fleet_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "name":
			out.Values[i] = ec._Fleet_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "companyName":
			out.Values[i] = ec._Fleet_companyName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "contactEmail":
			out.Values[i] = ec._Fleet_contactEmail(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "status":
			out.Values[i] = ec._Fleet_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "vehicles":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Fleet_vehicles(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "drivers":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Fleet_drivers(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "createdAt":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Fleet_createdAt(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "updatedAt":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Fleet_updatedAt(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var locationImplementors = []string{"Location"}

func (ec *executionContext) _Location(ctx context.Context, sel ast.SelectionSet, obj *model.Location) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, locationImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Location")
		case "latitude":
			out.Values[i] = ec._Location_latitude(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "longitude":
			out.Values[i] = ec._Location_longitude(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "address":
			out.Values[i] = ec._Location_address(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "createFleet":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createFleet(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateFleet":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateFleet(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createVehicle":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createVehicle(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateVehicle":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateVehicle(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "assignDriver":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_assignDriver(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createDriver":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createDriver(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateDriver":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateDriver(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "acknowledgeAlert":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_acknowledgeAlert(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "dismissAlert":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_dismissAlert(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "fleets":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_fleets(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "fleet":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_fleet(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "vehicles":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_vehicles(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "vehicle":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_vehicle(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "drivers":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_drivers(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "driver":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_driver(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "riskEvents":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_riskEvents(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "alerts":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_alerts(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "driverScores":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_driverScores(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "liveVehicleData":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_liveVehicleData(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "__type":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___type(ctx, field)
			})
		case "__schema":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___schema(ctx, field)
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var riskEventImplementors = []string{"RiskEvent"}

func (ec *executionContext) _RiskEvent(ctx context.Context, sel ast.SelectionSet, obj *models.RiskEvent) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, riskEventImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RiskEvent")
		case "id":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._RiskEvent_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "vehicleId":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._RiskEvent_vehicleId(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "vehicle":
			out.Values[i] = ec._RiskEvent_vehicle(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "driverId":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._RiskEvent_driverId(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "driver":
			out.Values[i] = ec._RiskEvent_driver(ctx, field, obj)
		case "eventType":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._RiskEvent_eventType(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "severity":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._RiskEvent_severity(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "riskScore":
			out.Values[i] = ec._RiskEvent_riskScore(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "timestamp":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._RiskEvent_timestamp(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "latitude":
			out.Values[i] = ec._RiskEvent_latitude(ctx, field, obj)
		case "longitude":
			out.Values[i] = ec._RiskEvent_longitude(ctx, field, obj)
		case "description":
			out.Values[i] = ec._RiskEvent_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "data":
			out.Values[i] = ec._RiskEvent_data(ctx, field, obj)
		case "status":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._RiskEvent_status(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "createdAt":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._RiskEvent_createdAt(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "updatedAt":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._RiskEvent_updatedAt(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var subscriptionImplementors = []string{"Subscription"}

func (ec *executionContext) _Subscription(ctx context.Context, sel ast.SelectionSet) func(ctx context.Context) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, subscriptionImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Subscription",
	})
	if len(fields) != 1 {
		ec.Errorf(ctx, "must subscribe to exactly one stream")
		return nil
	}

	switch fields[0].Name {
	case "vehicleUpdates":
		return ec._Subscription_vehicleUpdates(ctx, fields[0])
	case "riskEventNotifications":
		return ec._Subscription_riskEventNotifications(ctx, fields[0])
	case "alertNotifications":
		return ec._Subscription_alertNotifications(ctx, fields[0])
	default:
		panic("unknown field " + strconv.Quote(fields[0].Name))
	}
}

var telemetryEventImplementors = []string{"TelemetryEvent"}

func (ec *executionContext) _TelemetryEvent(ctx context.Context, sel ast.SelectionSet, obj *models.TelemetryEvent) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, telemetryEventImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TelemetryEvent")
		case "id":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TelemetryEvent_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "vehicleId":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TelemetryEvent_vehicleId(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "vehicle":
			out.Values[i] = ec._TelemetryEvent_vehicle(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "eventType":
			out.Values[i] = ec._TelemetryEvent_eventType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "timestamp":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TelemetryEvent_timestamp(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "latitude":
			out.Values[i] = ec._TelemetryEvent_latitude(ctx, field, obj)
		case "longitude":
			out.Values[i] = ec._TelemetryEvent_longitude(ctx, field, obj)
		case "speed":
			out.Values[i] = ec._TelemetryEvent_speed(ctx, field, obj)
		case "acceleration":
			out.Values[i] = ec._TelemetryEvent_acceleration(ctx, field, obj)
		case "data":
			out.Values[i] = ec._TelemetryEvent_data(ctx, field, obj)
		case "processedAt":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TelemetryEvent_processedAt(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "createdAt":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TelemetryEvent_createdAt(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var vehicleImplementors = []string{"Vehicle"}

func (ec *executionContext) _Vehicle(ctx context.Context, sel ast.SelectionSet, obj *models.Vehicle) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Vehicle")
		case "id":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Vehicle_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "vin":
			out.Values[i] = ec._Vehicle_vin(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "make":
			out.Values[i] = ec._Vehicle_make(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "model":
			out.Values[i] = ec._Vehicle_model(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "year":
			out.Values[i] = ec._Vehicle_year(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "licensePlate":
			out.Values[i] = ec._Vehicle_licensePlate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "fleetId":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Vehicle_fleetId(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "fleet":
			out.Values[i] = ec._Vehicle_fleet(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "driverId":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Vehicle_driverId(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "driver":
			out.Values[i] = ec._Vehicle_driver(ctx, field, obj)
		case "status":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Vehicle_status(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "currentLocation":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Vehicle_currentLocation(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "lastTelemetry":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Vehicle_lastTelemetry(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "riskScore":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Vehicle_riskScore(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "createdAt":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Vehicle_createdAt(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "updatedAt":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Vehicle_updatedAt(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var vehicleDataImplementors = []string{"VehicleData"}

func (ec *executionContext) _VehicleData(ctx context.Context, sel ast.SelectionSet, obj *model.VehicleData) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vehicleDataImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VehicleData")
		case "vehicle":
			out.Values[i] = ec._VehicleData_vehicle(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "location":
			out.Values[i] = ec._VehicleData_location(ctx, field, obj)
		case "speed":
			out.Values[i] = ec._VehicleData_speed(ctx, field, obj)
		case "heading":
			out.Values[i] = ec._VehicleData_heading(ctx, field, obj)
		case "engineStatus":
			out.Values[i] = ec._VehicleData_engineStatus(ctx, field, obj)
		case "fuelLevel":
			out.Values[i] = ec._VehicleData_fuelLevel(ctx, field, obj)
		case "lastUpdate":
			out.Values[i] = ec._VehicleData_lastUpdate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "isRepeatable":
			out.Values[i] = ec.___Directive_isRepeatable(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___InputValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___InputValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "description":
			out.Values[i] = ec.___Schema_description(ctx, field, obj)
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "specifiedByURL":
			out.Values[i] = ec.___Type_specifiedByURL(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		case "isOneOf":
			out.Values[i] = ec.___Type_isOneOf(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) marshalNAlert2githubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋpkgᚋmodelsᚐAlert(ctx context.Context, sel ast.SelectionSet, v models.Alert) graphql.Marshaler {
	return ec._Alert(ctx, sel, &v)
}

func (ec *executionContext) marshalNAlert2ᚕᚖgithubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋpkgᚋmodelsᚐAlertᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.Alert) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAlert2ᚖgithubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋpkgᚋmodelsᚐAlert(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNAlert2ᚖgithubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋpkgᚋmodelsᚐAlert(ctx context.Context, sel ast.SelectionSet, v *models.Alert) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Alert(ctx, sel, v)
}

func (ec *executionContext) unmarshalNAlertPriority2githubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋservicesᚋapiᚋgraphᚋmodelᚐAlertPriority(ctx context.Context, v any) (model.AlertPriority, error) {
	var res model.AlertPriority
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNAlertPriority2githubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋservicesᚋapiᚋgraphᚋmodelᚐAlertPriority(ctx context.Context, sel ast.SelectionSet, v model.AlertPriority) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNAlertStatus2githubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋservicesᚋapiᚋgraphᚋmodelᚐAlertStatus(ctx context.Context, v any) (model.AlertStatus, error) {
	var res model.AlertStatus
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNAlertStatus2githubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋservicesᚋapiᚋgraphᚋmodelᚐAlertStatus(ctx context.Context, sel ast.SelectionSet, v model.AlertStatus) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNAlertType2githubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋservicesᚋapiᚋgraphᚋmodelᚐAlertType(ctx context.Context, v any) (model.AlertType, error) {
	var res model.AlertType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNAlertType2githubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋservicesᚋapiᚋgraphᚋmodelᚐAlertType(ctx context.Context, sel ast.SelectionSet, v model.AlertType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v any) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNCreateDriverInput2githubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋservicesᚋapiᚋgraphᚋmodelᚐCreateDriverInput(ctx context.Context, v any) (model.CreateDriverInput, error) {
	res, err := ec.unmarshalInputCreateDriverInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateFleetInput2githubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋservicesᚋapiᚋgraphᚋmodelᚐCreateFleetInput(ctx context.Context, v any) (model.CreateFleetInput, error) {
	res, err := ec.unmarshalInputCreateFleetInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateVehicleInput2githubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋservicesᚋapiᚋgraphᚋmodelᚐCreateVehicleInput(ctx context.Context, v any) (model.CreateVehicleInput, error) {
	res, err := ec.unmarshalInputCreateVehicleInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDriver2githubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋpkgᚋmodelsᚐDriver(ctx context.Context, sel ast.SelectionSet, v models.Driver) graphql.Marshaler {
	return ec._Driver(ctx, sel, &v)
}

func (ec *executionContext) marshalNDriver2ᚕᚖgithubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋpkgᚋmodelsᚐDriverᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.Driver) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDriver2ᚖgithubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋpkgᚋmodelsᚐDriver(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNDriver2ᚖgithubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋpkgᚋmodelsᚐDriver(ctx context.Context, sel ast.SelectionSet, v *models.Driver) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Driver(ctx, sel, v)
}

func (ec *executionContext) marshalNDriverScore2ᚕᚖgithubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋpkgᚋmodelsᚐDriverScoreᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.DriverScore) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDriverScore2ᚖgithubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋpkgᚋmodelsᚐDriverScore(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNDriverScore2ᚖgithubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋpkgᚋmodelsᚐDriverScore(ctx context.Context, sel ast.SelectionSet, v *models.DriverScore) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DriverScore(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDriverStatus2githubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋservicesᚋapiᚋgraphᚋmodelᚐDriverStatus(ctx context.Context, v any) (model.DriverStatus, error) {
	var res model.DriverStatus
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDriverStatus2githubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋservicesᚋapiᚋgraphᚋmodelᚐDriverStatus(ctx context.Context, sel ast.SelectionSet, v model.DriverStatus) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNFleet2githubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋpkgᚋmodelsᚐFleet(ctx context.Context, sel ast.SelectionSet, v models.Fleet) graphql.Marshaler {
	return ec._Fleet(ctx, sel, &v)
}

func (ec *executionContext) marshalNFleet2ᚕᚖgithubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋpkgᚋmodelsᚐFleetᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.Fleet) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNFleet2ᚖgithubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋpkgᚋmodelsᚐFleet(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNFleet2ᚖgithubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋpkgᚋmodelsᚐFleet(ctx context.Context, sel ast.SelectionSet, v *models.Fleet) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Fleet(ctx, sel, v)
}

func (ec *executionContext) unmarshalNFloat2float64(ctx context.Context, v any) (float64, error) {
	res, err := graphql.UnmarshalFloatContext(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFloat2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalFloatContext(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return graphql.WrapContextMarshaler(ctx, res)
}

func (ec *executionContext) unmarshalNID2string(ctx context.Context, v any) (string, error) {
	res, err := graphql.UnmarshalID(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNID2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalID(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v any) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNRiskEvent2githubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋpkgᚋmodelsᚐRiskEvent(ctx context.Context, sel ast.SelectionSet, v models.RiskEvent) graphql.Marshaler {
	return ec._RiskEvent(ctx, sel, &v)
}

func (ec *executionContext) marshalNRiskEvent2ᚕᚖgithubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋpkgᚋmodelsᚐRiskEventᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.RiskEvent) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNRiskEvent2ᚖgithubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋpkgᚋmodelsᚐRiskEvent(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNRiskEvent2ᚖgithubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋpkgᚋmodelsᚐRiskEvent(ctx context.Context, sel ast.SelectionSet, v *models.RiskEvent) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._RiskEvent(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRiskEventStatus2githubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋservicesᚋapiᚋgraphᚋmodelᚐRiskEventStatus(ctx context.Context, v any) (model.RiskEventStatus, error) {
	var res model.RiskEventStatus
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNRiskEventStatus2githubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋservicesᚋapiᚋgraphᚋmodelᚐRiskEventStatus(ctx context.Context, sel ast.SelectionSet, v model.RiskEventStatus) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNRiskEventType2githubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋservicesᚋapiᚋgraphᚋmodelᚐRiskEventType(ctx context.Context, v any) (model.RiskEventType, error) {
	var res model.RiskEventType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNRiskEventType2githubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋservicesᚋapiᚋgraphᚋmodelᚐRiskEventType(ctx context.Context, sel ast.SelectionSet, v model.RiskEventType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNRiskSeverity2githubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋservicesᚋapiᚋgraphᚋmodelᚐRiskSeverity(ctx context.Context, v any) (model.RiskSeverity, error) {
	var res model.RiskSeverity
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNRiskSeverity2githubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋservicesᚋapiᚋgraphᚋmodelᚐRiskSeverity(ctx context.Context, sel ast.SelectionSet, v model.RiskSeverity) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v any) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNUpdateDriverInput2githubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋservicesᚋapiᚋgraphᚋmodelᚐUpdateDriverInput(ctx context.Context, v any) (model.UpdateDriverInput, error) {
	res, err := ec.unmarshalInputUpdateDriverInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateFleetInput2githubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋservicesᚋapiᚋgraphᚋmodelᚐUpdateFleetInput(ctx context.Context, v any) (model.UpdateFleetInput, error) {
	res, err := ec.unmarshalInputUpdateFleetInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateVehicleInput2githubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋservicesᚋapiᚋgraphᚋmodelᚐUpdateVehicleInput(ctx context.Context, v any) (model.UpdateVehicleInput, error) {
	res, err := ec.unmarshalInputUpdateVehicleInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNVehicle2githubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋpkgᚋmodelsᚐVehicle(ctx context.Context, sel ast.SelectionSet, v models.Vehicle) graphql.Marshaler {
	return ec._Vehicle(ctx, sel, &v)
}

func (ec *executionContext) marshalNVehicle2ᚕᚖgithubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋpkgᚋmodelsᚐVehicleᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.Vehicle) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNVehicle2ᚖgithubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋpkgᚋmodelsᚐVehicle(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNVehicle2ᚖgithubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋpkgᚋmodelsᚐVehicle(ctx context.Context, sel ast.SelectionSet, v *models.Vehicle) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Vehicle(ctx, sel, v)
}

func (ec *executionContext) marshalNVehicleData2githubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋservicesᚋapiᚋgraphᚋmodelᚐVehicleData(ctx context.Context, sel ast.SelectionSet, v model.VehicleData) graphql.Marshaler {
	return ec._VehicleData(ctx, sel, &v)
}

func (ec *executionContext) marshalNVehicleData2ᚖgithubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋservicesᚋapiᚋgraphᚋmodelᚐVehicleData(ctx context.Context, sel ast.SelectionSet, v *model.VehicleData) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._VehicleData(ctx, sel, v)
}

func (ec *executionContext) unmarshalNVehicleStatus2githubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋservicesᚋapiᚋgraphᚋmodelᚐVehicleStatus(ctx context.Context, v any) (model.VehicleStatus, error) {
	var res model.VehicleStatus
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNVehicleStatus2githubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋservicesᚋapiᚋgraphᚋmodelᚐVehicleStatus(ctx context.Context, sel ast.SelectionSet, v model.VehicleStatus) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v any) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v any) ([]string, error) {
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v any) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalOAlertStatus2ᚖgithubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋservicesᚋapiᚋgraphᚋmodelᚐAlertStatus(ctx context.Context, v any) (*model.AlertStatus, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.AlertStatus)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOAlertStatus2ᚖgithubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋservicesᚋapiᚋgraphᚋmodelᚐAlertStatus(ctx context.Context, sel ast.SelectionSet, v *model.AlertStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v any) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	_ = sel
	_ = ctx
	res := graphql.MarshalBoolean(v)
	return res
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v any) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	_ = ctx
	res := graphql.MarshalBoolean(*v)
	return res
}

func (ec *executionContext) marshalODriver2ᚖgithubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋpkgᚋmodelsᚐDriver(ctx context.Context, sel ast.SelectionSet, v *models.Driver) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Driver(ctx, sel, v)
}

func (ec *executionContext) marshalODriverScore2ᚖgithubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋpkgᚋmodelsᚐDriverScore(ctx context.Context, sel ast.SelectionSet, v *models.DriverScore) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverScore(ctx, sel, v)
}

func (ec *executionContext) unmarshalODriverStatus2ᚖgithubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋservicesᚋapiᚋgraphᚋmodelᚐDriverStatus(ctx context.Context, v any) (*model.DriverStatus, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.DriverStatus)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODriverStatus2ᚖgithubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋservicesᚋapiᚋgraphᚋmodelᚐDriverStatus(ctx context.Context, sel ast.SelectionSet, v *model.DriverStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOFleet2ᚖgithubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋpkgᚋmodelsᚐFleet(ctx context.Context, sel ast.SelectionSet, v *models.Fleet) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Fleet(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFloat2ᚖfloat64(ctx context.Context, v any) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloatContext(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFloat2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	res := graphql.MarshalFloatContext(*v)
	return graphql.WrapContextMarshaler(ctx, res)
}

func (ec *executionContext) unmarshalOID2ᚖstring(ctx context.Context, v any) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalID(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOID2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	_ = ctx
	res := graphql.MarshalID(*v)
	return res
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v any) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	_ = ctx
	res := graphql.MarshalInt(*v)
	return res
}

func (ec *executionContext) marshalOLocation2ᚖgithubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋservicesᚋapiᚋgraphᚋmodelᚐLocation(ctx context.Context, sel ast.SelectionSet, v *model.Location) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Location(ctx, sel, v)
}

func (ec *executionContext) marshalORiskEvent2ᚖgithubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋpkgᚋmodelsᚐRiskEvent(ctx context.Context, sel ast.SelectionSet, v *models.RiskEvent) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RiskEvent(ctx, sel, v)
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v any) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	_ = sel
	_ = ctx
	res := graphql.MarshalString(v)
	return res
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v any) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	_ = ctx
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) marshalOTelemetryEvent2ᚖgithubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋpkgᚋmodelsᚐTelemetryEvent(ctx context.Context, sel ast.SelectionSet, v *models.TelemetryEvent) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TelemetryEvent(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicle2ᚖgithubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋpkgᚋmodelsᚐVehicle(ctx context.Context, sel ast.SelectionSet, v *models.Vehicle) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Vehicle(ctx, sel, v)
}

func (ec *executionContext) marshalOVehicleData2ᚖgithubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋservicesᚋapiᚋgraphᚋmodelᚐVehicleData(ctx context.Context, sel ast.SelectionSet, v *model.VehicleData) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VehicleData(ctx, sel, v)
}

func (ec *executionContext) unmarshalOVehicleStatus2ᚖgithubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋservicesᚋapiᚋgraphᚋmodelᚐVehicleStatus(ctx context.Context, v any) (*model.VehicleStatus, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.VehicleStatus)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOVehicleStatus2ᚖgithubᚗcomᚋTirrellᚑCᚋfleetᚑriskᚑintelligenceᚋservicesᚋapiᚋgraphᚋmodelᚐVehicleStatus(ctx context.Context, sel ast.SelectionSet, v *model.VehicleStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
