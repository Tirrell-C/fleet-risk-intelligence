// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"bytes"
	"fmt"
	"io"
	"strconv"

	"github.com/Tirrell-C/fleet-risk-intelligence/pkg/models"
)

type CreateDriverInput struct {
	EmployeeID    string `json:"employeeId"`
	FirstName     string `json:"firstName"`
	LastName      string `json:"lastName"`
	Email         string `json:"email"`
	Phone         string `json:"phone"`
	LicenseNumber string `json:"licenseNumber"`
	FleetID       string `json:"fleetId"`
}

type CreateFleetInput struct {
	Name         string `json:"name"`
	CompanyName  string `json:"companyName"`
	ContactEmail string `json:"contactEmail"`
}

type CreateVehicleInput struct {
	Vin          string `json:"vin"`
	Make         string `json:"make"`
	Model        string `json:"model"`
	Year         int    `json:"year"`
	LicensePlate string `json:"licensePlate"`
	FleetID      string `json:"fleetId"`
}

type Location struct {
	Latitude  float64 `json:"latitude"`
	Longitude float64 `json:"longitude"`
	Address   *string `json:"address,omitempty"`
}

type Mutation struct {
}

type Query struct {
}

type Subscription struct {
}

type UpdateDriverInput struct {
	FirstName     *string       `json:"firstName,omitempty"`
	LastName      *string       `json:"lastName,omitempty"`
	Email         *string       `json:"email,omitempty"`
	Phone         *string       `json:"phone,omitempty"`
	LicenseNumber *string       `json:"licenseNumber,omitempty"`
	Status        *DriverStatus `json:"status,omitempty"`
}

type UpdateFleetInput struct {
	Name         *string `json:"name,omitempty"`
	CompanyName  *string `json:"companyName,omitempty"`
	ContactEmail *string `json:"contactEmail,omitempty"`
	Status       *string `json:"status,omitempty"`
}

type UpdateVehicleInput struct {
	Make         *string        `json:"make,omitempty"`
	Model        *string        `json:"model,omitempty"`
	Year         *int           `json:"year,omitempty"`
	LicensePlate *string        `json:"licensePlate,omitempty"`
	Status       *VehicleStatus `json:"status,omitempty"`
}

type VehicleData struct {
	Vehicle      *models.Vehicle `json:"vehicle"`
	Location     *Location       `json:"location,omitempty"`
	Speed        *float64        `json:"speed,omitempty"`
	Heading      *float64        `json:"heading,omitempty"`
	EngineStatus *string         `json:"engineStatus,omitempty"`
	FuelLevel    *float64        `json:"fuelLevel,omitempty"`
	LastUpdate   string          `json:"lastUpdate"`
}

type AlertPriority string

const (
	AlertPriorityLow      AlertPriority = "LOW"
	AlertPriorityMedium   AlertPriority = "MEDIUM"
	AlertPriorityHigh     AlertPriority = "HIGH"
	AlertPriorityCritical AlertPriority = "CRITICAL"
)

var AllAlertPriority = []AlertPriority{
	AlertPriorityLow,
	AlertPriorityMedium,
	AlertPriorityHigh,
	AlertPriorityCritical,
}

func (e AlertPriority) IsValid() bool {
	switch e {
	case AlertPriorityLow, AlertPriorityMedium, AlertPriorityHigh, AlertPriorityCritical:
		return true
	}
	return false
}

func (e AlertPriority) String() string {
	return string(e)
}

func (e *AlertPriority) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AlertPriority(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AlertPriority", str)
	}
	return nil
}

func (e AlertPriority) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *AlertPriority) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e AlertPriority) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type AlertStatus string

const (
	AlertStatusUnread    AlertStatus = "UNREAD"
	AlertStatusRead      AlertStatus = "READ"
	AlertStatusDismissed AlertStatus = "DISMISSED"
)

var AllAlertStatus = []AlertStatus{
	AlertStatusUnread,
	AlertStatusRead,
	AlertStatusDismissed,
}

func (e AlertStatus) IsValid() bool {
	switch e {
	case AlertStatusUnread, AlertStatusRead, AlertStatusDismissed:
		return true
	}
	return false
}

func (e AlertStatus) String() string {
	return string(e)
}

func (e *AlertStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AlertStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AlertStatus", str)
	}
	return nil
}

func (e AlertStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *AlertStatus) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e AlertStatus) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type AlertType string

const (
	AlertTypeRisk        AlertType = "RISK"
	AlertTypeMaintenance AlertType = "MAINTENANCE"
	AlertTypeSystem      AlertType = "SYSTEM"
)

var AllAlertType = []AlertType{
	AlertTypeRisk,
	AlertTypeMaintenance,
	AlertTypeSystem,
}

func (e AlertType) IsValid() bool {
	switch e {
	case AlertTypeRisk, AlertTypeMaintenance, AlertTypeSystem:
		return true
	}
	return false
}

func (e AlertType) String() string {
	return string(e)
}

func (e *AlertType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AlertType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AlertType", str)
	}
	return nil
}

func (e AlertType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *AlertType) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e AlertType) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type DriverStatus string

const (
	DriverStatusActive    DriverStatus = "ACTIVE"
	DriverStatusSuspended DriverStatus = "SUSPENDED"
	DriverStatusInactive  DriverStatus = "INACTIVE"
)

var AllDriverStatus = []DriverStatus{
	DriverStatusActive,
	DriverStatusSuspended,
	DriverStatusInactive,
}

func (e DriverStatus) IsValid() bool {
	switch e {
	case DriverStatusActive, DriverStatusSuspended, DriverStatusInactive:
		return true
	}
	return false
}

func (e DriverStatus) String() string {
	return string(e)
}

func (e *DriverStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DriverStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DriverStatus", str)
	}
	return nil
}

func (e DriverStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *DriverStatus) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e DriverStatus) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type RiskEventStatus string

const (
	RiskEventStatusOpen         RiskEventStatus = "OPEN"
	RiskEventStatusAcknowledged RiskEventStatus = "ACKNOWLEDGED"
	RiskEventStatusResolved     RiskEventStatus = "RESOLVED"
)

var AllRiskEventStatus = []RiskEventStatus{
	RiskEventStatusOpen,
	RiskEventStatusAcknowledged,
	RiskEventStatusResolved,
}

func (e RiskEventStatus) IsValid() bool {
	switch e {
	case RiskEventStatusOpen, RiskEventStatusAcknowledged, RiskEventStatusResolved:
		return true
	}
	return false
}

func (e RiskEventStatus) String() string {
	return string(e)
}

func (e *RiskEventStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RiskEventStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RiskEventStatus", str)
	}
	return nil
}

func (e RiskEventStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *RiskEventStatus) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e RiskEventStatus) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type RiskEventType string

const (
	RiskEventTypeSpeeding          RiskEventType = "SPEEDING"
	RiskEventTypeHarshBraking      RiskEventType = "HARSH_BRAKING"
	RiskEventTypeRapidAcceleration RiskEventType = "RAPID_ACCELERATION"
	RiskEventTypeFatigue           RiskEventType = "FATIGUE"
	RiskEventTypeDistractedDriving RiskEventType = "DISTRACTED_DRIVING"
	RiskEventTypeAggressiveDriving RiskEventType = "AGGRESSIVE_DRIVING"
)

var AllRiskEventType = []RiskEventType{
	RiskEventTypeSpeeding,
	RiskEventTypeHarshBraking,
	RiskEventTypeRapidAcceleration,
	RiskEventTypeFatigue,
	RiskEventTypeDistractedDriving,
	RiskEventTypeAggressiveDriving,
}

func (e RiskEventType) IsValid() bool {
	switch e {
	case RiskEventTypeSpeeding, RiskEventTypeHarshBraking, RiskEventTypeRapidAcceleration, RiskEventTypeFatigue, RiskEventTypeDistractedDriving, RiskEventTypeAggressiveDriving:
		return true
	}
	return false
}

func (e RiskEventType) String() string {
	return string(e)
}

func (e *RiskEventType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RiskEventType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RiskEventType", str)
	}
	return nil
}

func (e RiskEventType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *RiskEventType) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e RiskEventType) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type RiskSeverity string

const (
	RiskSeverityLow      RiskSeverity = "LOW"
	RiskSeverityMedium   RiskSeverity = "MEDIUM"
	RiskSeverityHigh     RiskSeverity = "HIGH"
	RiskSeverityCritical RiskSeverity = "CRITICAL"
)

var AllRiskSeverity = []RiskSeverity{
	RiskSeverityLow,
	RiskSeverityMedium,
	RiskSeverityHigh,
	RiskSeverityCritical,
}

func (e RiskSeverity) IsValid() bool {
	switch e {
	case RiskSeverityLow, RiskSeverityMedium, RiskSeverityHigh, RiskSeverityCritical:
		return true
	}
	return false
}

func (e RiskSeverity) String() string {
	return string(e)
}

func (e *RiskSeverity) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RiskSeverity(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RiskSeverity", str)
	}
	return nil
}

func (e RiskSeverity) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *RiskSeverity) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e RiskSeverity) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type VehicleStatus string

const (
	VehicleStatusActive      VehicleStatus = "ACTIVE"
	VehicleStatusMaintenance VehicleStatus = "MAINTENANCE"
	VehicleStatusInactive    VehicleStatus = "INACTIVE"
)

var AllVehicleStatus = []VehicleStatus{
	VehicleStatusActive,
	VehicleStatusMaintenance,
	VehicleStatusInactive,
}

func (e VehicleStatus) IsValid() bool {
	switch e {
	case VehicleStatusActive, VehicleStatusMaintenance, VehicleStatusInactive:
		return true
	}
	return false
}

func (e VehicleStatus) String() string {
	return string(e)
}

func (e *VehicleStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = VehicleStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid VehicleStatus", str)
	}
	return nil
}

func (e VehicleStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *VehicleStatus) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e VehicleStatus) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}
