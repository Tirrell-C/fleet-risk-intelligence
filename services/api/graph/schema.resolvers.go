package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.80

import (
	"context"
	"fmt"

	"github.com/Tirrell-C/fleet-risk-intelligence/pkg/models"
	"github.com/Tirrell-C/fleet-risk-intelligence/services/api/graph/model"
)

// ID is the resolver for the id field.
func (r *alertResolver) ID(ctx context.Context, obj *models.Alert) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// FleetID is the resolver for the fleetId field.
func (r *alertResolver) FleetID(ctx context.Context, obj *models.Alert) (string, error) {
	panic(fmt.Errorf("not implemented: FleetID - fleetId"))
}

// VehicleID is the resolver for the vehicleId field.
func (r *alertResolver) VehicleID(ctx context.Context, obj *models.Alert) (*string, error) {
	panic(fmt.Errorf("not implemented: VehicleID - vehicleId"))
}

// DriverID is the resolver for the driverId field.
func (r *alertResolver) DriverID(ctx context.Context, obj *models.Alert) (*string, error) {
	panic(fmt.Errorf("not implemented: DriverID - driverId"))
}

// RiskEventID is the resolver for the riskEventId field.
func (r *alertResolver) RiskEventID(ctx context.Context, obj *models.Alert) (*string, error) {
	panic(fmt.Errorf("not implemented: RiskEventID - riskEventId"))
}

// Type is the resolver for the type field.
func (r *alertResolver) Type(ctx context.Context, obj *models.Alert) (model.AlertType, error) {
	panic(fmt.Errorf("not implemented: Type - type"))
}

// Priority is the resolver for the priority field.
func (r *alertResolver) Priority(ctx context.Context, obj *models.Alert) (model.AlertPriority, error) {
	panic(fmt.Errorf("not implemented: Priority - priority"))
}

// Status is the resolver for the status field.
func (r *alertResolver) Status(ctx context.Context, obj *models.Alert) (model.AlertStatus, error) {
	panic(fmt.Errorf("not implemented: Status - status"))
}

// CreatedAt is the resolver for the createdAt field.
func (r *alertResolver) CreatedAt(ctx context.Context, obj *models.Alert) (string, error) {
	panic(fmt.Errorf("not implemented: CreatedAt - createdAt"))
}

// UpdatedAt is the resolver for the updatedAt field.
func (r *alertResolver) UpdatedAt(ctx context.Context, obj *models.Alert) (string, error) {
	panic(fmt.Errorf("not implemented: UpdatedAt - updatedAt"))
}

// ID is the resolver for the id field.
func (r *driverResolver) ID(ctx context.Context, obj *models.Driver) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// LicenseNumber is the resolver for the licenseNumber field.
func (r *driverResolver) LicenseNumber(ctx context.Context, obj *models.Driver) (string, error) {
	panic(fmt.Errorf("not implemented: LicenseNumber - licenseNumber"))
}

// FleetID is the resolver for the fleetId field.
func (r *driverResolver) FleetID(ctx context.Context, obj *models.Driver) (string, error) {
	panic(fmt.Errorf("not implemented: FleetID - fleetId"))
}

// Status is the resolver for the status field.
func (r *driverResolver) Status(ctx context.Context, obj *models.Driver) (model.DriverStatus, error) {
	panic(fmt.Errorf("not implemented: Status - status"))
}

// CurrentVehicle is the resolver for the currentVehicle field.
func (r *driverResolver) CurrentVehicle(ctx context.Context, obj *models.Driver) (*models.Vehicle, error) {
	panic(fmt.Errorf("not implemented: CurrentVehicle - currentVehicle"))
}

// DriverScore is the resolver for the driverScore field.
func (r *driverResolver) DriverScore(ctx context.Context, obj *models.Driver) (*models.DriverScore, error) {
	panic(fmt.Errorf("not implemented: DriverScore - driverScore"))
}

// CreatedAt is the resolver for the createdAt field.
func (r *driverResolver) CreatedAt(ctx context.Context, obj *models.Driver) (string, error) {
	panic(fmt.Errorf("not implemented: CreatedAt - createdAt"))
}

// UpdatedAt is the resolver for the updatedAt field.
func (r *driverResolver) UpdatedAt(ctx context.Context, obj *models.Driver) (string, error) {
	panic(fmt.Errorf("not implemented: UpdatedAt - updatedAt"))
}

// ID is the resolver for the id field.
func (r *driverScoreResolver) ID(ctx context.Context, obj *models.DriverScore) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// DriverID is the resolver for the driverId field.
func (r *driverScoreResolver) DriverID(ctx context.Context, obj *models.DriverScore) (string, error) {
	panic(fmt.Errorf("not implemented: DriverID - driverId"))
}

// LastUpdated is the resolver for the lastUpdated field.
func (r *driverScoreResolver) LastUpdated(ctx context.Context, obj *models.DriverScore) (string, error) {
	panic(fmt.Errorf("not implemented: LastUpdated - lastUpdated"))
}

// CreatedAt is the resolver for the createdAt field.
func (r *driverScoreResolver) CreatedAt(ctx context.Context, obj *models.DriverScore) (string, error) {
	panic(fmt.Errorf("not implemented: CreatedAt - createdAt"))
}

// UpdatedAt is the resolver for the updatedAt field.
func (r *driverScoreResolver) UpdatedAt(ctx context.Context, obj *models.DriverScore) (string, error) {
	panic(fmt.Errorf("not implemented: UpdatedAt - updatedAt"))
}

// ID is the resolver for the id field.
func (r *fleetResolver) ID(ctx context.Context, obj *models.Fleet) (string, error) {
	return fmt.Sprintf("%d", obj.ID), nil
}

// Vehicles is the resolver for the vehicles field.
func (r *fleetResolver) Vehicles(ctx context.Context, obj *models.Fleet) ([]*models.Vehicle, error) {
	panic(fmt.Errorf("not implemented: Vehicles - vehicles"))
}

// Drivers is the resolver for the drivers field.
func (r *fleetResolver) Drivers(ctx context.Context, obj *models.Fleet) ([]*models.Driver, error) {
	panic(fmt.Errorf("not implemented: Drivers - drivers"))
}

// CreatedAt is the resolver for the createdAt field.
func (r *fleetResolver) CreatedAt(ctx context.Context, obj *models.Fleet) (string, error) {
	return obj.CreatedAt.Format("2006-01-02T15:04:05Z07:00"), nil
}

// UpdatedAt is the resolver for the updatedAt field.
func (r *fleetResolver) UpdatedAt(ctx context.Context, obj *models.Fleet) (string, error) {
	return obj.UpdatedAt.Format("2006-01-02T15:04:05Z07:00"), nil
}

// CreateFleet is the resolver for the createFleet field.
func (r *mutationResolver) CreateFleet(ctx context.Context, input model.CreateFleetInput) (*models.Fleet, error) {
	fleet := &models.Fleet{
		Name:         input.Name,
		CompanyName:  input.CompanyName,
		ContactEmail: input.ContactEmail,
		Status:       "active",
	}

	if err := r.DB.Create(fleet).Error; err != nil {
		return nil, fmt.Errorf("failed to create fleet: %w", err)
	}

	return fleet, nil
}

// UpdateFleet is the resolver for the updateFleet field.
func (r *mutationResolver) UpdateFleet(ctx context.Context, id string, input model.UpdateFleetInput) (*models.Fleet, error) {
	panic(fmt.Errorf("not implemented: UpdateFleet - updateFleet"))
}

// CreateVehicle is the resolver for the createVehicle field.
func (r *mutationResolver) CreateVehicle(ctx context.Context, input model.CreateVehicleInput) (*models.Vehicle, error) {
	panic(fmt.Errorf("not implemented: CreateVehicle - createVehicle"))
}

// UpdateVehicle is the resolver for the updateVehicle field.
func (r *mutationResolver) UpdateVehicle(ctx context.Context, id string, input model.UpdateVehicleInput) (*models.Vehicle, error) {
	panic(fmt.Errorf("not implemented: UpdateVehicle - updateVehicle"))
}

// AssignDriver is the resolver for the assignDriver field.
func (r *mutationResolver) AssignDriver(ctx context.Context, vehicleID string, driverID string) (*models.Vehicle, error) {
	panic(fmt.Errorf("not implemented: AssignDriver - assignDriver"))
}

// CreateDriver is the resolver for the createDriver field.
func (r *mutationResolver) CreateDriver(ctx context.Context, input model.CreateDriverInput) (*models.Driver, error) {
	panic(fmt.Errorf("not implemented: CreateDriver - createDriver"))
}

// UpdateDriver is the resolver for the updateDriver field.
func (r *mutationResolver) UpdateDriver(ctx context.Context, id string, input model.UpdateDriverInput) (*models.Driver, error) {
	panic(fmt.Errorf("not implemented: UpdateDriver - updateDriver"))
}

// AcknowledgeAlert is the resolver for the acknowledgeAlert field.
func (r *mutationResolver) AcknowledgeAlert(ctx context.Context, id string) (*models.Alert, error) {
	panic(fmt.Errorf("not implemented: AcknowledgeAlert - acknowledgeAlert"))
}

// DismissAlert is the resolver for the dismissAlert field.
func (r *mutationResolver) DismissAlert(ctx context.Context, id string) (*models.Alert, error) {
	panic(fmt.Errorf("not implemented: DismissAlert - dismissAlert"))
}

// Fleets is the resolver for the fleets field.
func (r *queryResolver) Fleets(ctx context.Context) ([]*models.Fleet, error) {
	var fleets []*models.Fleet
	if err := r.DB.Find(&fleets).Error; err != nil {
		return nil, fmt.Errorf("failed to fetch fleets: %w", err)
	}
	return fleets, nil
}

// Fleet is the resolver for the fleet field.
func (r *queryResolver) Fleet(ctx context.Context, id string) (*models.Fleet, error) {
	var fleet models.Fleet
	if err := r.DB.First(&fleet, id).Error; err != nil {
		return nil, fmt.Errorf("failed to fetch fleet: %w", err)
	}
	return &fleet, nil
}

// Vehicles is the resolver for the vehicles field.
func (r *queryResolver) Vehicles(ctx context.Context, fleetID *string) ([]*models.Vehicle, error) {
	panic(fmt.Errorf("not implemented: Vehicles - vehicles"))
}

// Vehicle is the resolver for the vehicle field.
func (r *queryResolver) Vehicle(ctx context.Context, id string) (*models.Vehicle, error) {
	panic(fmt.Errorf("not implemented: Vehicle - vehicle"))
}

// Drivers is the resolver for the drivers field.
func (r *queryResolver) Drivers(ctx context.Context, fleetID *string) ([]*models.Driver, error) {
	panic(fmt.Errorf("not implemented: Drivers - drivers"))
}

// Driver is the resolver for the driver field.
func (r *queryResolver) Driver(ctx context.Context, id string) (*models.Driver, error) {
	panic(fmt.Errorf("not implemented: Driver - driver"))
}

// RiskEvents is the resolver for the riskEvents field.
func (r *queryResolver) RiskEvents(ctx context.Context, vehicleID *string, driverID *string, limit *int) ([]*models.RiskEvent, error) {
	panic(fmt.Errorf("not implemented: RiskEvents - riskEvents"))
}

// Alerts is the resolver for the alerts field.
func (r *queryResolver) Alerts(ctx context.Context, fleetID string, status *model.AlertStatus) ([]*models.Alert, error) {
	panic(fmt.Errorf("not implemented: Alerts - alerts"))
}

// DriverScores is the resolver for the driverScores field.
func (r *queryResolver) DriverScores(ctx context.Context, fleetID string) ([]*models.DriverScore, error) {
	panic(fmt.Errorf("not implemented: DriverScores - driverScores"))
}

// LiveVehicleData is the resolver for the liveVehicleData field.
func (r *queryResolver) LiveVehicleData(ctx context.Context, vehicleID string) (*model.VehicleData, error) {
	panic(fmt.Errorf("not implemented: LiveVehicleData - liveVehicleData"))
}

// ID is the resolver for the id field.
func (r *riskEventResolver) ID(ctx context.Context, obj *models.RiskEvent) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// VehicleID is the resolver for the vehicleId field.
func (r *riskEventResolver) VehicleID(ctx context.Context, obj *models.RiskEvent) (string, error) {
	panic(fmt.Errorf("not implemented: VehicleID - vehicleId"))
}

// DriverID is the resolver for the driverId field.
func (r *riskEventResolver) DriverID(ctx context.Context, obj *models.RiskEvent) (*string, error) {
	panic(fmt.Errorf("not implemented: DriverID - driverId"))
}

// EventType is the resolver for the eventType field.
func (r *riskEventResolver) EventType(ctx context.Context, obj *models.RiskEvent) (model.RiskEventType, error) {
	panic(fmt.Errorf("not implemented: EventType - eventType"))
}

// Severity is the resolver for the severity field.
func (r *riskEventResolver) Severity(ctx context.Context, obj *models.RiskEvent) (model.RiskSeverity, error) {
	panic(fmt.Errorf("not implemented: Severity - severity"))
}

// Timestamp is the resolver for the timestamp field.
func (r *riskEventResolver) Timestamp(ctx context.Context, obj *models.RiskEvent) (string, error) {
	panic(fmt.Errorf("not implemented: Timestamp - timestamp"))
}

// Status is the resolver for the status field.
func (r *riskEventResolver) Status(ctx context.Context, obj *models.RiskEvent) (model.RiskEventStatus, error) {
	panic(fmt.Errorf("not implemented: Status - status"))
}

// CreatedAt is the resolver for the createdAt field.
func (r *riskEventResolver) CreatedAt(ctx context.Context, obj *models.RiskEvent) (string, error) {
	panic(fmt.Errorf("not implemented: CreatedAt - createdAt"))
}

// UpdatedAt is the resolver for the updatedAt field.
func (r *riskEventResolver) UpdatedAt(ctx context.Context, obj *models.RiskEvent) (string, error) {
	panic(fmt.Errorf("not implemented: UpdatedAt - updatedAt"))
}

// VehicleUpdates is the resolver for the vehicleUpdates field.
func (r *subscriptionResolver) VehicleUpdates(ctx context.Context, vehicleID string) (<-chan *model.VehicleData, error) {
	panic(fmt.Errorf("not implemented: VehicleUpdates - vehicleUpdates"))
}

// RiskEventNotifications is the resolver for the riskEventNotifications field.
func (r *subscriptionResolver) RiskEventNotifications(ctx context.Context, fleetID string) (<-chan *models.RiskEvent, error) {
	panic(fmt.Errorf("not implemented: RiskEventNotifications - riskEventNotifications"))
}

// AlertNotifications is the resolver for the alertNotifications field.
func (r *subscriptionResolver) AlertNotifications(ctx context.Context, fleetID string) (<-chan *models.Alert, error) {
	panic(fmt.Errorf("not implemented: AlertNotifications - alertNotifications"))
}

// ID is the resolver for the id field.
func (r *telemetryEventResolver) ID(ctx context.Context, obj *models.TelemetryEvent) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// VehicleID is the resolver for the vehicleId field.
func (r *telemetryEventResolver) VehicleID(ctx context.Context, obj *models.TelemetryEvent) (string, error) {
	panic(fmt.Errorf("not implemented: VehicleID - vehicleId"))
}

// Timestamp is the resolver for the timestamp field.
func (r *telemetryEventResolver) Timestamp(ctx context.Context, obj *models.TelemetryEvent) (string, error) {
	panic(fmt.Errorf("not implemented: Timestamp - timestamp"))
}

// ProcessedAt is the resolver for the processedAt field.
func (r *telemetryEventResolver) ProcessedAt(ctx context.Context, obj *models.TelemetryEvent) (*string, error) {
	panic(fmt.Errorf("not implemented: ProcessedAt - processedAt"))
}

// CreatedAt is the resolver for the createdAt field.
func (r *telemetryEventResolver) CreatedAt(ctx context.Context, obj *models.TelemetryEvent) (string, error) {
	panic(fmt.Errorf("not implemented: CreatedAt - createdAt"))
}

// ID is the resolver for the id field.
func (r *vehicleResolver) ID(ctx context.Context, obj *models.Vehicle) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// FleetID is the resolver for the fleetId field.
func (r *vehicleResolver) FleetID(ctx context.Context, obj *models.Vehicle) (string, error) {
	panic(fmt.Errorf("not implemented: FleetID - fleetId"))
}

// DriverID is the resolver for the driverId field.
func (r *vehicleResolver) DriverID(ctx context.Context, obj *models.Vehicle) (*string, error) {
	panic(fmt.Errorf("not implemented: DriverID - driverId"))
}

// Status is the resolver for the status field.
func (r *vehicleResolver) Status(ctx context.Context, obj *models.Vehicle) (model.VehicleStatus, error) {
	panic(fmt.Errorf("not implemented: Status - status"))
}

// CurrentLocation is the resolver for the currentLocation field.
func (r *vehicleResolver) CurrentLocation(ctx context.Context, obj *models.Vehicle) (*model.Location, error) {
	panic(fmt.Errorf("not implemented: CurrentLocation - currentLocation"))
}

// LastTelemetry is the resolver for the lastTelemetry field.
func (r *vehicleResolver) LastTelemetry(ctx context.Context, obj *models.Vehicle) (*models.TelemetryEvent, error) {
	panic(fmt.Errorf("not implemented: LastTelemetry - lastTelemetry"))
}

// RiskScore is the resolver for the riskScore field.
func (r *vehicleResolver) RiskScore(ctx context.Context, obj *models.Vehicle) (float64, error) {
	panic(fmt.Errorf("not implemented: RiskScore - riskScore"))
}

// CreatedAt is the resolver for the createdAt field.
func (r *vehicleResolver) CreatedAt(ctx context.Context, obj *models.Vehicle) (string, error) {
	panic(fmt.Errorf("not implemented: CreatedAt - createdAt"))
}

// UpdatedAt is the resolver for the updatedAt field.
func (r *vehicleResolver) UpdatedAt(ctx context.Context, obj *models.Vehicle) (string, error) {
	panic(fmt.Errorf("not implemented: UpdatedAt - updatedAt"))
}

// Alert returns AlertResolver implementation.
func (r *Resolver) Alert() AlertResolver { return &alertResolver{r} }

// Driver returns DriverResolver implementation.
func (r *Resolver) Driver() DriverResolver { return &driverResolver{r} }

// DriverScore returns DriverScoreResolver implementation.
func (r *Resolver) DriverScore() DriverScoreResolver { return &driverScoreResolver{r} }

// Fleet returns FleetResolver implementation.
func (r *Resolver) Fleet() FleetResolver { return &fleetResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// RiskEvent returns RiskEventResolver implementation.
func (r *Resolver) RiskEvent() RiskEventResolver { return &riskEventResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

// TelemetryEvent returns TelemetryEventResolver implementation.
func (r *Resolver) TelemetryEvent() TelemetryEventResolver { return &telemetryEventResolver{r} }

// Vehicle returns VehicleResolver implementation.
func (r *Resolver) Vehicle() VehicleResolver { return &vehicleResolver{r} }

type alertResolver struct{ *Resolver }
type driverResolver struct{ *Resolver }
type driverScoreResolver struct{ *Resolver }
type fleetResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type riskEventResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
type telemetryEventResolver struct{ *Resolver }
type vehicleResolver struct{ *Resolver }
